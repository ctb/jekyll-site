<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>Noam Ross</title>
 <link href="http://www.noamross.net/blog/rss.xml" rel="self"/>
 <link href="http://www.noamross.net"/>
 <updated>2014-05-14T09:04:06-07:00</updated>
 <id>http://www.noamross.net</id>
 <author>
   <name>Noam Ross</name>
   <email>noam.ross@gmail.com</email>
 </author>

 
 <entry>
   <title>Vectorization in R: Why?</title>
   <link href="http://www.noamross.net/blog/2014/4/16/vectorization-in-r--why.html"/>
   <updated>2014-04-16T11:05:35-07:00</updated>
   <id>hhttp://www.noamross.net/blog/2014/4/16/vectorization-in-r--why</id>
   <content type="html">&lt;head&gt;
  &lt;style type=&quot;text/css&quot;  media=&quot;all&quot;&gt;
    table tbody {border-top:2px; border-bottom:2px;}
    table thead {border-bottom:1px;}
  &lt;/style&gt;
&lt;/head&gt; &lt;p&gt;&lt;em&gt;Here are my notes from a recent talk I gave on vectorization at a &lt;a href=&quot;http://www.noamross.net/davis-r-users-group.html&quot;&gt;Davis R Users’ Group&lt;/a&gt; meeting. Thanks to &lt;a href=&quot;https://twitter.com/vsbuffalo&quot;&gt;Vince Buffalo&lt;/a&gt;, &lt;a href=&quot;http://twitter.com/johnmyleswhite&quot;&gt;John Myles White&lt;/a&gt;, and &lt;a href=&quot;http://twitter.com/hadleywickham&quot;&gt;Hadley Wickham&lt;/a&gt; for their input as I was preparing this. Feedback welcome!&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Beginning R users are often told to “vectorize” their code. Here, I try to explain &lt;em&gt;why&lt;/em&gt; vectorization can be advantageous in R by showing how R works under the hood.&lt;/p&gt;
&lt;p&gt;Now, remember, &lt;a href=&quot;http://c2.com/cgi/wiki?PrematureOptimization&quot;&gt;premature optimization is the root of all evil (Knuth)&lt;/a&gt;. Don’t start re-writing your code unless the time saved is going to be worth the time invested. &lt;a href=&quot;http://www.noamross.net/blog/2013/4/25/faster-talk.html&quot;&gt;Other approaches, like finding a bigger machine or parallelization&lt;/a&gt;, could give you more bang for the buck in terms of programming time. But if you understand the nuts and bolts of vectorization in R, it may help you write shorter, simpler, safer, and yes, faster code in the first place.&lt;/p&gt;
&lt;p&gt;First, let’s acknowledge that vectorization can seem like voodoo. Consider a two math problems, one vectorized, and one not:&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math&quot;&gt;\[\begin{bmatrix} 1 \\ 2 \\ 3 \end{bmatrix} + 
\begin{bmatrix} 1 \\ 2 \\ 3 \end{bmatrix} =
\begin{bmatrix} 2 \\ 4 \\ 6 \end{bmatrix}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math&quot;&gt;\[\begin{aligned}
1 + 1 = 2 \\
2 + 2 = 4 \\
3 + 3 = 6
\end{aligned}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Why on earth should these take a different amount of time to calculate? Linear algebra isn’t magic. In both cases there are three addition operations to perform. So what’s up?&lt;/p&gt;
&lt;h2 id=&quot;what-on-earth-is-r-actually-doing&quot;&gt;1. What on earth is R actually doing?&lt;/h2&gt;
&lt;p&gt;R is a &lt;em&gt;high-level&lt;/em&gt;, &lt;em&gt;interpreted&lt;/em&gt; computer language. This means that R takes care of a lot of basic computer tasks for you. For instance, when you type&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;    i &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;fl&quot;&gt;5.0&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;you &lt;em&gt;don’t&lt;/em&gt; have to tell your computer:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;That “5.0” is a floating-point number&lt;/li&gt;
&lt;li&gt;That “i” should store numeric-type data&lt;/li&gt;
&lt;li&gt;To find a place in memory for to put “5”&lt;/li&gt;
&lt;li&gt;To register “i” as a pointer to that place in memory&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You also don’t have to convert &lt;code&gt;i &amp;lt;- 5.0&lt;/code&gt; to binary code. That’s done automatically when you hit ‘Enter’.&lt;/p&gt;
&lt;p&gt;When you then type&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;i &amp;lt;-&lt;span class=&quot;st&quot;&gt; &amp;quot;foo&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;you don’t have to tell the computer that &lt;code&gt;i&lt;/code&gt; no longer stores an integer but a series of characters that form a &lt;em&gt;string&lt;/em&gt;, to store “f”, “o”, and “o”, consecutively, etc.&lt;/p&gt;
&lt;p&gt;R figures these things on it’s own, on the fly, as you type commands or source them from a file. This means that running a command in R takes a &lt;em&gt;relatively&lt;/em&gt; longer time than it might in a lower-level language, such as C. If I am writing in C, I might write&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;int i
i =&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This tells the computer the &lt;code&gt;i&lt;/code&gt; will store data of the type &lt;code&gt;int&lt;/code&gt; (integers), and assign the value 5 to it. If I try to assign 5.5 to it, something will go wrong. Depending on my set-up, it might throw an error, or just silently assign 5 to &lt;code&gt;i&lt;/code&gt;. But C doesn’t have to figure out what type of data is is represented by &lt;code&gt;i&lt;/code&gt; and this is part of what makes it faster.&lt;/p&gt;
&lt;p&gt;Here’s another example. If, in R, you type:&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;2L +&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;fl&quot;&gt;3.5&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The computer asks:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“OK, what’s the first thing?”&lt;/p&gt;
&lt;p&gt;“An integer”&lt;/p&gt;
&lt;p&gt;“The second thing?”&lt;/p&gt;
&lt;p&gt;“A a floating-point number”&lt;/p&gt;
&lt;p&gt;“Do we have a way to deal with adding an integer and a floating-point number?”&lt;/p&gt;
&lt;p&gt;“Yes! Convert the integer to a floating-point number, then add the two floating point numbers”&lt;/p&gt;
&lt;p&gt;[converts integer]&lt;/p&gt;
&lt;p&gt;[finds a place in memory for the answer]&lt;/p&gt;
&lt;p&gt;etc.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If R were a &lt;em&gt;compiled&lt;/em&gt; computer language, like C or FORTRAN, much of this “figuring out” would be accomplished during the compilation step, not when the program was run. Compiled programs are translated into binary computer language after they are written, but before they are run, and this occurs over the &lt;em&gt;whole program&lt;/em&gt;, rather than line-by-line. This allows the compiler to organize the binary machine code in an optimal way for the computer to interpret.&lt;/p&gt;
&lt;p&gt;What does this have to do with vectorization in R? Well, &lt;strong&gt;many R functions are actually written in a a compiled language&lt;/strong&gt;, such as C, C++, and FORTRAN, and have a small R “wrapper”. For instance, when you inspect the code for &lt;code&gt;fft&lt;/code&gt;, the fast Fourier transform, you see&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&amp;gt;&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;fft
function (z, &lt;span class=&quot;dt&quot;&gt;inverse =&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;FALSE&lt;/span&gt;) 
&lt;span class=&quot;kw&quot;&gt;.Call&lt;/span&gt;(C_fft, z, inverse)
&amp;lt;bytecode:&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;0x7fc261e1b910&lt;/span&gt;&amp;gt;
&lt;span class=&quot;er&quot;&gt;&amp;lt;&lt;/span&gt;environment:&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;namespace:stats&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;R is passing the data onto a C function called &lt;code&gt;C_fft&lt;/code&gt;. You’ll see this in many R functions. If you look at their source code, it will include &lt;code&gt;.C()&lt;/code&gt;, &lt;code&gt;.Call()&lt;/code&gt;, or sometimes &lt;code&gt;.Internal()&lt;/code&gt; or &lt;code&gt;.Primitive()&lt;/code&gt;. These means R is calling a C, C++, or FORTRAN program to carry out operations. However, R still has to interpret the input of the function before passing it to the compiled code. In &lt;code&gt;fft()&lt;/code&gt; the compiled code runs only &lt;em&gt;after&lt;/em&gt; R figures out the data type in &lt;code&gt;z&lt;/code&gt;, and also whether to use the default value of &lt;code&gt;inverse&lt;/code&gt;. The compiled code is able to run faster than code written in pure R, because the “figuring out” stuff is done first, and it can zoom ahead without the “translation” steps that R needs.&lt;/p&gt;
&lt;p&gt;If you need to run a function over all the values in a vector, you could pass a whole vector through the R function to the compiled code, or you could call the R function repeatedly for each value. If you do the latter, R has to do the “figuring out” stuff, as well as the translation, &lt;em&gt;each time&lt;/em&gt;. But if you call it once, with a vector, the “figuring out” part happens just once.&lt;/p&gt;
&lt;p&gt;Inside the C or FORTRAN code, vectors are actually processed using loops or a similar construct. This is inevitable; somehow the computer is going to need to operate on each element of your vector. Since this occurs in the compiled code, though, without the overhead of R functions, this is much faster.&lt;/p&gt;
&lt;p&gt;Another important component of the speed of vectorized operations is that vectors in R are &lt;em&gt;typed&lt;/em&gt;. Despite all of its flexibility, R does have some restrictions on what we can do. All elements of a vector must be the same data type. If I try to do this&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;a &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;c&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;ot&quot;&gt;FALSE&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I get&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&amp;gt;&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;a
[&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;] &lt;span class=&quot;st&quot;&gt;&amp;quot;1&amp;quot;&lt;/span&gt;     &lt;span class=&quot;st&quot;&gt;&amp;quot;2&amp;quot;&lt;/span&gt;     &lt;span class=&quot;st&quot;&gt;&amp;quot;FALSE&amp;quot;&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;
&amp;gt;&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt;(a)
[&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;] &lt;span class=&quot;st&quot;&gt;&amp;quot;character&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;R converts all my data to characters. It can’t handle a vector with different data types.&lt;/p&gt;
&lt;p&gt;So when R needs to perform an operation like&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;c&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;) +&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;c&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;R only has to ask what types of data are in &lt;em&gt;each vector&lt;/em&gt; (2) rather than &lt;em&gt;each element&lt;/em&gt; (6).&lt;/p&gt;
&lt;p&gt;One consequence of all this is that fast R code is short. If you can express what you want to do in R in a line or two, with just a few function calls that are actually calling compiled code, it’ll be more efficient than if you write long program, with the added overhead of many function calls. This is not the case in all other languages. Often, in compiled languages, you want to stick with lots of very simple statements, because that allows the compiler to figure out the most efficient translation of the code.&lt;/p&gt;
&lt;h2 id=&quot;everything-is-a-vector&quot;&gt;2. Everything is a vector&lt;/h2&gt;
&lt;p&gt;In R &lt;em&gt;everything&lt;/em&gt; is a vector. To quote Tim Smith in &lt;a href=&quot;http://tim-smith.us/arrgh/&quot;&gt;“aRrgh: a newcomer’s (angry) guide to R”&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;All naked numbers are double-width floating-point atomic vectors of length one. You’re welcome.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This means that, in R, typing “6” tells R something like&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&amp;lt;start vector, type=numeric, length=&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&amp;gt;&lt;span class=&quot;dv&quot;&gt;6&lt;/span&gt;&amp;lt;end vector&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;While in other languages, “6” might just be&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&amp;lt;numeric&amp;gt;&lt;span class=&quot;dv&quot;&gt;6&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So, while in other languages, it might be more efficient to express something as a single number rather than a length-one vector, in R this is impossible. There’s no &lt;em&gt;advantage&lt;/em&gt; to NOT organizing your data as vector. In other languages, short vectors might be better expressed as scalars.&lt;/p&gt;
&lt;h2 id=&quot;linear-algebra-is-a-special-case&quot;&gt;3. Linear algebra is a special case&lt;/h2&gt;
&lt;p&gt;Linear algebra is one of the core functions of a lot of computing, so there are highly optimized programs for linear algebra. Such a program is called a BLAS - basic linear algebra system. R, and a lot of other software, relies on these specialized programs and outsources linear algebra to them. A BLAS is generally designed to be highly efficient and has things like built-in parallel processing, hardware-specific implementation, and a host of other tricks. So if your calculations can be expressed in actual linear algebra terms, such as matrix multiplication, than it is almost certainly faster to vectorize them because the BLAS will be doing most of the heavy lifting.&lt;/p&gt;
&lt;p&gt;There are faster and slower linear algebra libraries, and you can install new ones on your computer and tell R to use them instead of the defaults. This used to be like putting a new engine in your car, but &lt;a href=&quot;http://moderntoolmaking.blogspot.com/2013/07/for-faster-r-on-mac-use-veclib.html&quot;&gt;it’s gotten considerably easier&lt;/a&gt;. For certain problems, a shiny new BLAS can considerably speed up code, but results vary depending on the specific linear algebra operations you are using.&lt;/p&gt;
&lt;h2 id=&quot;functionals-pre-allocating-memory-avoiding-side-effects.&quot;&gt;4. Functionals: Pre-allocating memory, avoiding side effects.&lt;/h2&gt;
&lt;p&gt;There are a whole family of functions in R called &lt;em&gt;functionals&lt;/em&gt;, or &lt;code&gt;apply&lt;/code&gt; functions, which take vectors (or matrices, or lists) of values and apply arbitrary functions to each. Because these can use &lt;em&gt;arbitrary&lt;/em&gt; functions, they are NOT compiled. Functionals mostly are written in pure R, and they speed up code only in certain cases.&lt;/p&gt;
&lt;p&gt;One operation that is slow in R, and somewhat slow in all languages, is memory allocation. So one of the slower ways to write a &lt;code&gt;for&lt;/code&gt; loop is to resize a vector repeatedly, so that R has to re-allocate memory repeatedly, like this:&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;j &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;
for (i in &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;:&lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;) {
    j[i] =&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here, in each repetition of the &lt;code&gt;for&lt;/code&gt; loop, R has to re-size the vector and re-allocate memory. It has to find the vector in memory, create a new vector that will fit more data, copy the old data over, insert the new data, and erase the old vector. This can get very slow as vectors get big.&lt;/p&gt;
&lt;p&gt;If one pre-allocates a vector that fits all the values, R doesn’t have to re-allocate memory each iteration, and the results can be much faster. Here’s how you’d do that for the above case:&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;j &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;rep&lt;/span&gt;(&lt;span class=&quot;ot&quot;&gt;NA&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;)
for (i in &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;:&lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;) {
    j[i] =&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;apply&lt;/code&gt; or &lt;code&gt;plyr::*ply&lt;/code&gt; functions all actually have &lt;code&gt;for&lt;/code&gt; loops inside, but they automatically do things like pre-allocating vector size so you don’t screw it up. This is the main reason that they can be faster.&lt;/p&gt;
&lt;p&gt;Another thing that “ply” functions help with is avoiding what are known as &lt;em&gt;side effects&lt;/em&gt;. When you run a &lt;em&gt;ply&lt;/em&gt; function, everything happens inside that function, and nothing changes in your working environment (this is known as “functional programming”). In a &lt;code&gt;for&lt;/code&gt; loop, on the other hand, when you do something like &lt;code&gt;for(i in 1:10)&lt;/code&gt;, you get the leftover &lt;code&gt;i&lt;/code&gt; in your environment. This is considered bad practice sometimes. Having a bunch of temporary variables like &lt;code&gt;i&lt;/code&gt; lying around could cause problems in your code, especially if you use &lt;code&gt;i&lt;/code&gt; for something else later.&lt;/p&gt;
&lt;p&gt;I’ve seen arguments that &lt;code&gt;ply&lt;/code&gt; functions make for more expressive, easier to read code, but I’ve seen the same argument for &lt;code&gt;for&lt;/code&gt; loops. Once you are used to writing vectorized code in general, though, &lt;code&gt;for&lt;/code&gt; loops in R will can seem odd.&lt;/p&gt;
&lt;h2 id=&quot;so-when-might-for-loops-make-sense-over-vectorization&quot;&gt;So when might &lt;code&gt;for&lt;/code&gt; loops make sense over vectorization?&lt;/h2&gt;
&lt;p&gt;There are still situations that it may make sense to use &lt;code&gt;for&lt;/code&gt; loops instead of vectorized functions, though. These include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Using functions that don’t take vector arguments&lt;/li&gt;
&lt;li&gt;Loops where each iteration is dependent on the results of previous iterations&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note that the second case is tricky. In some cases where the &lt;em&gt;obvious&lt;/em&gt; implementation of an algorithm uses a &lt;code&gt;for&lt;/code&gt; loop, there’s a vectorized way around it. For instance, &lt;a href=&quot;https://www.stat.auckland.ac.nz/~ihaka/downloads/Taupo-handouts.pdf&quot;&gt;here is a good example of implementing a random walk using vectorized code&lt;/a&gt;. In these cases, you often want to call functions that are essentially C/FORTRAN implementations of loop operations to avoid the loop in R. Examples of such functions include &lt;code&gt;cumsum&lt;/code&gt; (cumulative sums), &lt;code&gt;rle&lt;/code&gt; (counting number of repeated value), and &lt;code&gt;ifelse&lt;/code&gt; (vectorized if…else statements).&lt;/p&gt;
&lt;p&gt;Your performance penalty for using a &lt;code&gt;for&lt;/code&gt; loop instead a vector will be small if the number of iterations is relatively small, and the functions called &lt;em&gt;inside&lt;/em&gt; your for loop are slow. In these cases, looping and overhead from function calls make up a small fraction of your computational time. It may make sense to use a &lt;code&gt;for&lt;/code&gt; loop in such cases, especially if they are more intuitive or easier to read &lt;em&gt;for you&lt;/em&gt;.&lt;/p&gt;
&lt;h2 id=&quot;some-resources-on-vectorization&quot;&gt;Some resources on vectorization&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Good discussion in a couple of &lt;a href=&quot;http://www.johnmyleswhite.com/notebook/2013/01/24/writing-better-statistical-programs-in-r/&quot;&gt;blog&lt;/a&gt; &lt;a href=&quot;http://www.johnmyleswhite.com/notebook/2013/12/22/the-relationship-between-vectorized-and-devectorized-code/&quot;&gt;posts&lt;/a&gt; by John Myles White.&lt;/li&gt;
&lt;li&gt;Some relevant chapters of Hadley Wickham’s Advanced R book: &lt;a href=&quot;http://adv-r.had.co.nz/Functionals.html&quot;&gt;Functionals&lt;/a&gt; and &lt;a href=&quot;http://adv-r.had.co.nz/Profiling.html#vectorise&quot;&gt;code profiling&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Vectorization is covered in chapters 3 and 4 of the classic text on R’s idiosyncrasies - &lt;a href=&quot;http://www.burns-stat.com/pages/Tutor/R_inferno.pdf&quot;&gt;The R Inferno&lt;/a&gt;, by Patrick Burns&lt;/li&gt;
&lt;li&gt;Here are a bunch of assorted blog posts with good examples of speeding up code with vectorization
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.r-bloggers.com/how-to-use-vectorization-to-streamline-simulations/&quot;&gt;http://www.r-bloggers.com/how-to-use-vectorization-to-streamline-simulations/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://nesterko.com/blog/2011/04/29/drastic-r-speed-ups-via-vectorization-and-bug-fixes/&quot;&gt;http://nesterko.com/blog/2011/04/29/drastic-r-speed-ups-via-vectorization-and-bug-fixes/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.revolutionanalytics.com/2014/04/a-look-a-r-vectorization-through-the-collatz-conjecture.html&quot;&gt;http://blog.revolutionanalytics.com/2014/04/a-look-a-r-vectorization-through-the-collatz-conjecture.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://rpubs.com/daspringate/vectorisation&quot;&gt;http://rpubs.com/daspringate/vectorisation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://quanttrader.info/public/FasterRCode.pdf&quot;&gt;http://quanttrader.info/public/FasterRCode.pdf&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
 </entry>
 
 <entry>
   <title>ESA 2014 Abstract: Modeling forest disease using a macroparasite framework</title>
   <link href="http://www.noamross.net/blog/2014/2/27/esaab.html"/>
   <updated>2014-02-27T13:17:19-08:00</updated>
   <id>hhttp://www.noamross.net/blog/2014/2/27/esaab</id>
   <content type="html">&lt;head&gt;
  &lt;style type=&quot;text/css&quot;  media=&quot;all&quot;&gt;
    table tbody {border-top:2px; border-bottom:2px;}
    table thead {border-bottom:1px;}
  &lt;/style&gt;
&lt;/head&gt; &lt;p&gt;I just submitted the abstract below to the &lt;a href=&quot;http://www.esa.org/sacramento/&quot;&gt;ESA 2014 meeting&lt;/a&gt;. Can’t wait! I’m also organizing an oral session with &lt;a href=&quot;https://sites.google.com/a/ucdavis.edu/richard-cobb/&quot;&gt;Richard Cobb&lt;/a&gt;: “&lt;a href=&quot;http://esa.org/am/organizedorals/#id2743&quot;&gt;Ecosystem and Community Effects of Native and Invasive Diseases&lt;/a&gt;.” Click through for more details. It’s gonna be a good year! I haven’t been to ESA since 2008.&lt;/p&gt;
&lt;blockquote&gt;
&lt;h3&gt;Modeling forest disease using a macroparasite framework&lt;/h3&gt;
&lt;p&gt;Noam Ross, UC Davis Graduate Group in Ecology&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Background/Question/Methods:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Forest pathogens are typically modeled using variants of &lt;em&gt;SI&lt;/em&gt; models, in which the infection states of trees are binary. However, many forest pathogens only infect trees locally, in isolated bole infections or leaf infections. Individual trees can have multiple, independently reproducing infections. In these cases, models based on macroparasite frameworks, where multiple parasites occupy an organism, may better represent disease dynamics.&lt;/p&gt;
&lt;p&gt;I developed a model for the host­pathogen dynamics of Sudden Oak Death (SOD), a disease caused by the invasive pathogen &lt;em&gt;Phytophthora ramorum&lt;/em&gt; in California oak woodlands and forests, based on the macroparasite framework of Anderson and May (1978). I compared the dynamics of this model to an &lt;em&gt;SI&lt;/em&gt; model, parameterizing both using data from SOD field studies, and examined the conditions under which each could reproduce patterns in field data.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Results/Conclusions&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The macroparasite model reproduces several patterns observed in field data which the &lt;em&gt;SI&lt;/em&gt; model does not. First, the macroparasite model, even without age­related variation in parameters, generates data with positive age­mortality relationships due to accumulating infections in older trees. The &lt;em&gt;SI&lt;/em&gt; model requires explicit age structure in model parameters to produce similar patterns. Secondly, the macroparasite model generates observed density­mortality patterns, which can not be produced by the &lt;em&gt;SI&lt;/em&gt; model. Thirdly, the macroparasite model generates aggregated distribution of infections in hosts, which can explain the phenomenon of “super spreaders”, i.e. individuals that produce high amounts of inoculum and cause a large fraction of new infections. The &lt;em&gt;SI&lt;/em&gt; model only generates this pattern when extended by including individual variation in disease parameters. All these phenomena are more pronounced under conditions corresponding to late stages of disease invasion, and when the time scales of host and pathogen life stage parameters are similar.&lt;/p&gt;
&lt;p&gt;The macroparasite framework is a parsimonious approach that can explain several important phenomena in forest disease. Data and models to with only binary infection status can lead to misinterpretation of observed patterns.&lt;/p&gt;
&lt;p&gt;Slides and related materials will be archived at &lt;a href=&quot;http://doi.org/rpm&quot;&gt;http://doi.org/rpm&lt;/a&gt; prior to the conference.&lt;a href=&quot;#fn1&quot; class=&quot;footnoteRef&quot; id=&quot;fnref1&quot;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;footnotes&quot;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&quot;fn1&quot;&gt;&lt;p&gt;I created a &lt;a href=&quot;http://doi.org/rpm&quot;&gt;placeholder record at figshare.com&lt;/a&gt; so that a permanent link to my slides will be in the program. I think this is a great habit to get into for conferences. This way your talk will be permanently accessible via the conference program both after the actual event.&lt;a href=&quot;#fnref1&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content>
 </entry>
 
 <entry>
   <title>Using Dates and Times in R</title>
   <link href="http://www.noamross.net/blog/2014/2/10/using-times-and-dates-in-r---presentation-code.html"/>
   <updated>2014-02-10T15:09:57-08:00</updated>
   <id>hhttp://www.noamross.net/blog/2014/2/10/using-times-and-dates-in-r---presentation-code</id>
   <content type="html">&lt;head&gt;
  &lt;style type=&quot;text/css&quot;  media=&quot;all&quot;&gt;
    table tbody {border-top:2px; border-bottom:2px;}
    table thead {border-bottom:1px;}
  &lt;/style&gt;
&lt;/head&gt; &lt;p&gt;&lt;em&gt;Today at the &lt;a href=&quot;http://www.noamross.net/davis-r-users-group.html&quot;&gt;Davis R Users’ Group&lt;/a&gt;, &lt;a href=&quot;http://ffhi.ucdavis.edu/people/directory/bmdixon&quot;&gt;Bonnie Dixon&lt;/a&gt; gave a tutorial on the various ways to handle dates and times in R. Bonnie provided this great script which walks through essential classes, functions, and packages. Here it is piped through &lt;code&gt;knitr::spin&lt;/code&gt;. The original R script can be found as a gist &lt;a href=&quot;https://gist.github.com/noamross/8928124&quot;&gt;here&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;datetime-classes&quot;&gt;Date/time classes&lt;/h2&gt;
&lt;p&gt;Three date/time classes are built-in in R, Date, POSIXct, and POSIXlt.&lt;/p&gt;
&lt;h3 id=&quot;date&quot;&gt;Date&lt;/h3&gt;
&lt;p&gt;This is the class to use if you have only dates, but no times, in your data.&lt;/p&gt;
&lt;p&gt;create a date:&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;dt1 &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;as.Date&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;2012-07-22&amp;quot;&lt;/span&gt;)
dt1&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;## [1] &amp;quot;2012-07-22&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;non-standard formats must be specified:&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;dt2 &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;as.Date&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;04/20/2011&amp;quot;&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;format =&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;%m/%d/%Y&amp;quot;&lt;/span&gt;)
dt2&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;## [1] &amp;quot;2011-04-20&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;dt3 &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;as.Date&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;October 6, 2010&amp;quot;&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;format =&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;%B %d, %Y&amp;quot;&lt;/span&gt;)
dt3&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;## [1] &amp;quot;2010-10-06&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;see list of format symbols:&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;st&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;`&lt;/span&gt;(strptime)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;calculations with dates:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;find the difference between dates:&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;dt1 -&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;dt2&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;## Time difference of 459 days&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;difftime&lt;/span&gt;(dt1, dt2, &lt;span class=&quot;dt&quot;&gt;units =&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;weeks&amp;quot;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;## Time difference of 65.57 weeks&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Add or subtract days:&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;dt2 +&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;## [1] &amp;quot;2011-04-30&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;dt2 -&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;## [1] &amp;quot;2011-04-10&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;create a vector of dates and find the intervals between them:&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;three.dates &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;as.Date&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;c&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;2010-07-22&amp;quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;quot;2011-04-20&amp;quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;quot;2012-10-06&amp;quot;&lt;/span&gt;))
three.dates&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;## [1] &amp;quot;2010-07-22&amp;quot; &amp;quot;2011-04-20&amp;quot; &amp;quot;2012-10-06&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;diff&lt;/span&gt;(three.dates)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;## Time differences in days
## [1] 272 535&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;create a sequence of dates:&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;six.weeks &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;seq&lt;/span&gt;(dt1, &lt;span class=&quot;dt&quot;&gt;length =&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;by =&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;week&amp;quot;&lt;/span&gt;)
six.weeks&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;## [1] &amp;quot;2012-07-22&amp;quot; &amp;quot;2012-07-29&amp;quot; &amp;quot;2012-08-05&amp;quot; &amp;quot;2012-08-12&amp;quot; &amp;quot;2012-08-19&amp;quot;
## [6] &amp;quot;2012-08-26&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;six.weeks &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;seq&lt;/span&gt;(dt1, &lt;span class=&quot;dt&quot;&gt;length =&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;by =&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;14&lt;/span&gt;)
six.weeks&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;## [1] &amp;quot;2012-07-22&amp;quot; &amp;quot;2012-08-05&amp;quot; &amp;quot;2012-08-19&amp;quot; &amp;quot;2012-09-02&amp;quot; &amp;quot;2012-09-16&amp;quot;
## [6] &amp;quot;2012-09-30&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;six.weeks &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;seq&lt;/span&gt;(dt1, &lt;span class=&quot;dt&quot;&gt;length =&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;by =&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;2 weeks&amp;quot;&lt;/span&gt;)
six.weeks&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;## [1] &amp;quot;2012-07-22&amp;quot; &amp;quot;2012-08-05&amp;quot; &amp;quot;2012-08-19&amp;quot; &amp;quot;2012-09-02&amp;quot; &amp;quot;2012-09-16&amp;quot;
## [6] &amp;quot;2012-09-30&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;see the internal integer representation&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;unclass&lt;/span&gt;(dt1)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;## [1] 15543&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;dt1 -&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;as.Date&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;1970-01-01&amp;quot;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;## Time difference of 15543 days&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;posixct&quot;&gt;POSIXct&lt;/h3&gt;
&lt;p&gt;If you have times in your data, this is usually the best class to use.&lt;/p&gt;
&lt;p&gt;create some POSIXct objects:&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;tm1 &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;as.POSIXct&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;2013-07-24 23:55:26&amp;quot;&lt;/span&gt;)
tm1&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;## [1] &amp;quot;2013-07-24 23:55:26 PDT&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;tm2 &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;as.POSIXct&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;25072013 08:32:07&amp;quot;&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;format =&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;%d%m%Y %H:%M:%S&amp;quot;&lt;/span&gt;)
tm2&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;## [1] &amp;quot;2013-07-25 08:32:07 PDT&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;specify the time zone:&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;tm3 &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;as.POSIXct&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;2010-12-01 11:42:03&amp;quot;&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;tz =&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;GMT&amp;quot;&lt;/span&gt;)
tm3&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;## [1] &amp;quot;2010-12-01 11:42:03 GMT&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;some calculations with times&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;compare times:&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;tm2 &amp;gt;&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;tm1&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;## [1] TRUE&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Add or subtract seconds:&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;tm1 +&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;30&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;## [1] &amp;quot;2013-07-24 23:55:56 PDT&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;tm1 -&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;30&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;## [1] &amp;quot;2013-07-24 23:54:56 PDT&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;find the difference between times:&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;tm2 -&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;tm1&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;## Time difference of 8.611 hours&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;automatically adjusts for daylight savings time:&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;as.POSIXct&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;2013-03-10 08:32:07&amp;quot;&lt;/span&gt;) -&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;as.POSIXct&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;2013-03-09 23:55:26&amp;quot;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;## Time difference of 7.611 hours&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Get the current time (in POSIXct by default):&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;Sys.time&lt;/span&gt;()&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;## [1] &amp;quot;2014-02-10 18:26:01 PST&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;see the internal integer representation:&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;unclass&lt;/span&gt;(tm1)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;## [1] 1.375e+09
## attr(,&amp;quot;tzone&amp;quot;)
## [1] &amp;quot;&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;difftime&lt;/span&gt;(tm1, &lt;span class=&quot;kw&quot;&gt;as.POSIXct&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;1970-01-01 00:00:00&amp;quot;&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;tz =&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;UTC&amp;quot;&lt;/span&gt;), &lt;span class=&quot;dt&quot;&gt;units =&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;secs&amp;quot;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;## Time difference of 1.375e+09 secs&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;posixlt&quot;&gt;POSIXlt&lt;/h3&gt;
&lt;p&gt;This class enables easy extraction of specific componants of a time. (“ct” stand for calender time and “lt” stands for local time. “lt” also helps one remember that POXIXlt objects are &lt;em&gt;lists&lt;/em&gt;.)&lt;/p&gt;
&lt;p&gt;create a time:&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;tm1.lt &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;as.POSIXlt&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;2013-07-24 23:55:26&amp;quot;&lt;/span&gt;)
tm1.lt&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;## [1] &amp;quot;2013-07-24 23:55:26&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;unclass&lt;/span&gt;(tm1.lt)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;## $sec
## [1] 26
## 
## $min
## [1] 55
## 
## $hour
## [1] 23
## 
## $mday
## [1] 24
## 
## $mon
## [1] 6
## 
## $year
## [1] 113
## 
## $wday
## [1] 3
## 
## $yday
## [1] 204
## 
## $isdst
## [1] 1&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;unlist&lt;/span&gt;(tm1.lt)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;##   sec   min  hour  mday   mon  year  wday  yday isdst 
##    26    55    23    24     6   113     3   204     1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;extract componants of a time object:&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;tm1.lt$sec&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;## [1] 26&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;tm1.lt$wday&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;## [1] 3&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;truncate or round off the time:&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;trunc&lt;/span&gt;(tm1.lt, &lt;span class=&quot;st&quot;&gt;&amp;quot;days&amp;quot;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;## [1] &amp;quot;2013-07-24&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;trunc&lt;/span&gt;(tm1.lt, &lt;span class=&quot;st&quot;&gt;&amp;quot;mins&amp;quot;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;## [1] &amp;quot;2013-07-24 23:55:00&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;chron&quot;&gt;chron&lt;/h3&gt;
&lt;p&gt;This class is a good option when you don’t need to deal with timezones. It requires the package &lt;code&gt;chron&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;require&lt;/span&gt;(chron)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;## Loading required package: chron
## 
## Attaching package: &amp;#39;chron&amp;#39;
## 
## The following objects are masked from &amp;#39;package:lubridate&amp;#39;:
## 
##     days, hours, minutes, seconds, years&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;create some times:&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;tm1.c &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;as.chron&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;2013-07-24 23:55:26&amp;quot;&lt;/span&gt;)
tm1.c&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;## [1] (07/24/13 23:55:26)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;tm2.c &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;as.chron&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;07/25/13 08:32:07&amp;quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;quot;%m/%d/%y %H:%M:%S&amp;quot;&lt;/span&gt;)
tm2.c&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;## [1] (07/25/13 08:32:07)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;extract just the date:&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;dates&lt;/span&gt;(tm1.c)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;##     day  
## 07/24/13&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;compare times:&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;tm2.c &amp;gt;&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;tm1.c&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;## [1] TRUE&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;add days:&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;tm1.c +&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;## [1] (08/03/13 23:55:26)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;calculate the differene between times:&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;tm2.c -&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;tm1.c&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;## [1] 08:36:41&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;difftime&lt;/span&gt;(tm2.c, tm1.c, &lt;span class=&quot;dt&quot;&gt;units =&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;hours&amp;quot;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;## Time difference of 8.611 hours&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;does not adjust for daylight savings time:&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;as.chron&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;2013-03-10 08:32:07&amp;quot;&lt;/span&gt;) -&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;as.chron&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;2013-03-09 23:55:26&amp;quot;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;## [1] 08:36:41&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Detach the &lt;code&gt;chron&lt;/code&gt; package as it will interfere with &lt;code&gt;lubridate&lt;/code&gt; later in this script.&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;detach&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;package:chron&amp;quot;&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;unload =&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;TRUE&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;summary-of-datetime-classes&quot;&gt;Summary of date/time classes&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;When you just have dates, use Date.&lt;/li&gt;
&lt;li&gt;When you have times, POSIXct is usually the best,&lt;/li&gt;
&lt;li&gt;but POSIXlt enables easy extraction of specific components&lt;/li&gt;
&lt;li&gt;and chron is simplest when you don’t need to deal with timezones and daylight savings time.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;manipulating-times-and-dates&quot;&gt;Manipulating times and dates&lt;/h2&gt;
&lt;h3 id=&quot;lubridate&quot;&gt;lubridate&lt;/h3&gt;
&lt;p&gt;This package is a wrapper for POSIXct with more intuitive syntax.&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;require&lt;/span&gt;(lubridate)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;create a time:&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;tm1.lub &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;ymd_hms&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;2013-07-24 23:55:26&amp;quot;&lt;/span&gt;)
tm1.lub&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;## [1] &amp;quot;2013-07-24 23:55:26 UTC&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;tm2.lub &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;mdy_hm&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;07/25/13 08:32&amp;quot;&lt;/span&gt;)
tm2.lub&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;## [1] &amp;quot;2013-07-25 08:32:00 UTC&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;tm3.lub &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;ydm_hm&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;2013-25-07 4:00am&amp;quot;&lt;/span&gt;)
tm3.lub&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;## [1] &amp;quot;2013-07-25 04:00:00 UTC&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;tm4.lub &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;dmy&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;26072013&amp;quot;&lt;/span&gt;)
tm4.lub&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;## [1] &amp;quot;2013-07-26 UTC&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;some manipulations: extract or reassign componants:&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;year&lt;/span&gt;(tm1.lub)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;## [1] 2013&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;week&lt;/span&gt;(tm1.lub)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;## [1] 30&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;wday&lt;/span&gt;(tm1.lub, &lt;span class=&quot;dt&quot;&gt;label =&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;TRUE&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;## [1] Wed
## Levels: Sun &amp;lt; Mon &amp;lt; Tues &amp;lt; Wed &amp;lt; Thurs &amp;lt; Fri &amp;lt; Sat&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;hour&lt;/span&gt;(tm1.lub)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;## [1] 23&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;tz&lt;/span&gt;(tm1.lub)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;## [1] &amp;quot;UTC&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;second&lt;/span&gt;(tm2.lub) &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;7&lt;/span&gt;
tm2.lub&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;## [1] &amp;quot;2013-07-25 08:32:07 UTC&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;converting to decimal hours can facilitate some types of calculations:&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;tm1.dechr &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;hour&lt;/span&gt;(tm1.lub) +&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;minute&lt;/span&gt;(tm1.lub)/&lt;span class=&quot;dv&quot;&gt;60&lt;/span&gt; +&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;second&lt;/span&gt;(tm1.lub)/&lt;span class=&quot;dv&quot;&gt;3600&lt;/span&gt;
tm1.dechr&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;## [1] 23.92&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Lubridate distinguishes between four types of objects: instants, intervals, durations, and periods. An instant is a specific moment in time. Intervals, durations, and periods are all ways of recording time spans.&lt;/p&gt;
&lt;p&gt;Dates and times parsed in lubridate are instants:&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;is.instant&lt;/span&gt;(tm1.lub)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;## [1] TRUE&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;round an instant:&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;round_date&lt;/span&gt;(tm1.lub, &lt;span class=&quot;st&quot;&gt;&amp;quot;minute&amp;quot;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;## [1] &amp;quot;2013-07-24 23:55:00 UTC&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;round_date&lt;/span&gt;(tm1.lub, &lt;span class=&quot;st&quot;&gt;&amp;quot;day&amp;quot;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;## [1] &amp;quot;2013-07-25 UTC&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;get the current time or date as an instant:&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;now&lt;/span&gt;()&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;## [1] &amp;quot;2014-02-10 18:26:02 PST&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;today&lt;/span&gt;()&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;## [1] &amp;quot;2014-02-10&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that lubridate uses UTC time zones as default.&lt;/p&gt;
&lt;p&gt;see an instant in a different time zone:&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;with_tz&lt;/span&gt;(tm1.lub, &lt;span class=&quot;st&quot;&gt;&amp;quot;America/Los_Angeles&amp;quot;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;## [1] &amp;quot;2013-07-24 16:55:26 PDT&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;change the time zone of an instant (keeping the same clock time):&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;force_tz&lt;/span&gt;(tm1.lub, &lt;span class=&quot;st&quot;&gt;&amp;quot;America/Los_Angeles&amp;quot;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;## [1] &amp;quot;2013-07-24 23:55:26 PDT&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;some calculations with instants. Note that the units are seconds:&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;tm2.lub -&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;tm1.lub&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;## Time difference of 8.611 hours&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;tm2.lub &amp;gt;&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;tm1.lub&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;## [1] TRUE&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;tm1.lub +&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;30&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;## [1] &amp;quot;2013-07-24 23:55:56 UTC&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;An interval is the span of time that occurs between two specified instants.&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;in.bed &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;as.interval&lt;/span&gt;(tm1.lub, tm2.lub)
in.bed&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;## [1] 2013-07-24 23:55:26 UTC--2013-07-25 08:32:07 UTC&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Check whether a certain instant occured with a specified interval:&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;tm3.lub %within%&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;in.bed&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;## [1] TRUE&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;tm4.lub %within%&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;in.bed&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;## [1] FALSE&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;determine whether two intervals overlap:&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;daylight &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;as.interval&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;ymd_hm&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;2013-07-25 06:03&amp;quot;&lt;/span&gt;), &lt;span class=&quot;kw&quot;&gt;ymd_hm&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;2013-07-25 20:23&amp;quot;&lt;/span&gt;))
daylight&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;## [1] 2013-07-25 06:03:00 UTC--2013-07-25 20:23:00 UTC&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;int_overlaps&lt;/span&gt;(in.bed, daylight)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;## [1] TRUE&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A duration is a time span not anchored to specific start and end times. It has an exact, fixed length, and is stored internally in seconds.&lt;/p&gt;
&lt;p&gt;create some durations:&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;ten.minutes &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;dminutes&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;)
ten.minutes&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;## [1] &amp;quot;600s (~10 minutes)&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;five.days &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;ddays&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;)
five.days&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;## [1] &amp;quot;432000s (~5 days)&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;one.year &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;dyears&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;)
one.year&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;## [1] &amp;quot;31536000s (~365 days)&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;as.duration&lt;/span&gt;(in.bed)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;## [1] &amp;quot;31001s (~8.61 hours)&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;arithmatic with durations:&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;tm1.lub -&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;ten.minutes&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;## [1] &amp;quot;2013-07-24 23:45:26 UTC&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;five.days +&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;dhours&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;12&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;## [1] &amp;quot;475200s (~5.5 days)&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;ten.minutes/&lt;span class=&quot;kw&quot;&gt;as.duration&lt;/span&gt;(in.bed)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;## [1] 0.01935&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A period is a time span not anchored to specific start and end times, and measured in units larger than seconds with inexact lengths. create some periods:&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;three.weeks &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;weeks&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;)
three.weeks&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;## [1] &amp;quot;21d 0H 0M 0S&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;four.hours &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;hours&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;)
four.hours&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;## [1] &amp;quot;4H 0M 0S&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;arithmatic with periods:&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;tm4.lub +&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;three.weeks&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;## [1] &amp;quot;2013-08-16 UTC&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;sabbatical &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;months&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;6&lt;/span&gt;) +&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;days&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;12&lt;/span&gt;)
sabbatical&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;## [1] &amp;quot;6m 12d 0H 0M 0S&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;three.weeks/sabbatical&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;## estimate only: convert to intervals for accuracy

## [1] 0.108&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;calculating-mean-clock-times&quot;&gt;Calculating mean clock times&lt;/h3&gt;
&lt;p&gt;Say we have a vector of clock times in decimal hours, and we want to calculate the mean clock time.&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;bed.times &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;c&lt;/span&gt;(&lt;span class=&quot;fl&quot;&gt;23.9&lt;/span&gt;, &lt;span class=&quot;fl&quot;&gt;0.5&lt;/span&gt;, &lt;span class=&quot;fl&quot;&gt;22.7&lt;/span&gt;, &lt;span class=&quot;fl&quot;&gt;0.1&lt;/span&gt;, &lt;span class=&quot;fl&quot;&gt;23.3&lt;/span&gt;, &lt;span class=&quot;fl&quot;&gt;1.2&lt;/span&gt;, &lt;span class=&quot;fl&quot;&gt;23.6&lt;/span&gt;)
bed.times&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;## [1] 23.9  0.5 22.7  0.1 23.3  1.2 23.6&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;mean&lt;/span&gt;(bed.times)  &lt;span class=&quot;co&quot;&gt;# doesn&amp;#39;t work&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;## [1] 13.61&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The clock has a circular scale, which ends where it begins, so we need to use circular statistics. (For more info on circular statistics see &lt;a href=&quot;http://en.wikipedia.org/wiki/Mean_of_circular_quantities&quot;&gt;http://en.wikipedia.org/wiki/Mean_of_circular_quantities&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;Get the package, psych.&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;require&lt;/span&gt;(psych)
&lt;span class=&quot;kw&quot;&gt;circadian.mean&lt;/span&gt;(bed.times)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;## [1] 23.9&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;an-example-of-using-times-and-dates-in-a-data-frame&quot;&gt;An example of using times and dates in a data frame&lt;/h3&gt;
&lt;p&gt;Here is a data frame with a week of hypothetical times of going to bed and getting up for one person, and the total amount of time sleep time obtained each night according to a sleep monitoring device.&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;sleep &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;data.frame&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;bed.time =&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;ymd_hms&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;2013-09-01 23:05:24&amp;quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;quot;2013-09-02 22:51:09&amp;quot;&lt;/span&gt;, 
    &lt;span class=&quot;st&quot;&gt;&amp;quot;2013-09-04 00:09:16&amp;quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;quot;2013-09-04 23:43:31&amp;quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;quot;2013-09-06 00:17:41&amp;quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;quot;2013-09-06 22:42:27&amp;quot;&lt;/span&gt;, 
    &lt;span class=&quot;st&quot;&gt;&amp;quot;2013-09-08 00:22:27&amp;quot;&lt;/span&gt;), &lt;span class=&quot;dt&quot;&gt;rise.time =&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;ymd_hms&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;2013-09-02 08:03:29&amp;quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;quot;2013-09-03 07:34:21&amp;quot;&lt;/span&gt;, 
    &lt;span class=&quot;st&quot;&gt;&amp;quot;2013-09-04 07:45:06&amp;quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;quot;2013-09-05 07:07:17&amp;quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;quot;2013-09-06 08:17:13&amp;quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;quot;2013-09-07 06:52:11&amp;quot;&lt;/span&gt;, 
    &lt;span class=&quot;st&quot;&gt;&amp;quot;2013-09-08 07:15:19&amp;quot;&lt;/span&gt;), &lt;span class=&quot;dt&quot;&gt;sleep.time =&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;dhours&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;c&lt;/span&gt;(&lt;span class=&quot;fl&quot;&gt;6.74&lt;/span&gt;, &lt;span class=&quot;fl&quot;&gt;7.92&lt;/span&gt;, &lt;span class=&quot;fl&quot;&gt;7.01&lt;/span&gt;, &lt;span class=&quot;fl&quot;&gt;6.23&lt;/span&gt;, &lt;span class=&quot;fl&quot;&gt;6.34&lt;/span&gt;, 
    &lt;span class=&quot;fl&quot;&gt;7.42&lt;/span&gt;, &lt;span class=&quot;fl&quot;&gt;6.45&lt;/span&gt;)))
sleep&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;##              bed.time           rise.time           sleep.time
## 1 2013-09-01 23:05:24 2013-09-02 08:03:29 24264s (~6.74 hours)
## 2 2013-09-02 22:51:09 2013-09-03 07:34:21 28512s (~7.92 hours)
## 3 2013-09-04 00:09:16 2013-09-04 07:45:06 25236s (~7.01 hours)
## 4 2013-09-04 23:43:31 2013-09-05 07:07:17 22428s (~6.23 hours)
## 5 2013-09-06 00:17:41 2013-09-06 08:17:13 22824s (~6.34 hours)
## 6 2013-09-06 22:42:27 2013-09-07 06:52:11 26712s (~7.42 hours)
## 7 2013-09-08 00:22:27 2013-09-08 07:15:19 23220s (~6.45 hours)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We want to calculate sleep efficiency, the percent of time in bed spent asleep.&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;sleep$efficiency &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;round&lt;/span&gt;(sleep$sleep.time/(sleep$rise.time -&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;sleep$bed.time) *&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;
&lt;span class=&quot;st&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;100&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;)
sleep&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;##              bed.time           rise.time           sleep.time efficiency
## 1 2013-09-01 23:05:24 2013-09-02 08:03:29 24264s (~6.74 hours)       75.2
## 2 2013-09-02 22:51:09 2013-09-03 07:34:21 28512s (~7.92 hours)       90.8
## 3 2013-09-04 00:09:16 2013-09-04 07:45:06 25236s (~7.01 hours)       92.3
## 4 2013-09-04 23:43:31 2013-09-05 07:07:17 22428s (~6.23 hours)       84.2
## 5 2013-09-06 00:17:41 2013-09-06 08:17:13 22824s (~6.34 hours)       79.3
## 6 2013-09-06 22:42:27 2013-09-07 06:52:11 26712s (~7.42 hours)       90.9
## 7 2013-09-08 00:22:27 2013-09-08 07:15:19 23220s (~6.45 hours)       93.7&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now let’s calculate the mean of each column:&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;colMeans&lt;/span&gt;(sleep)  &lt;span class=&quot;co&quot;&gt;# doesn&amp;#39;t work&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;## Error: &amp;#39;x&amp;#39; must be numeric&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;circadian.mean&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;hour&lt;/span&gt;(sleep$bed.time) +&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;minute&lt;/span&gt;(sleep$bed.time)/&lt;span class=&quot;dv&quot;&gt;60&lt;/span&gt; +&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;second&lt;/span&gt;(sleep$bed.time)/&lt;span class=&quot;dv&quot;&gt;3600&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;## [1] 23.6&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;circadian.mean&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;hour&lt;/span&gt;(sleep$rise.time) +&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;minute&lt;/span&gt;(sleep$rise.time)/&lt;span class=&quot;dv&quot;&gt;60&lt;/span&gt; +&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;second&lt;/span&gt;(sleep$rise.time)/&lt;span class=&quot;dv&quot;&gt;3600&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;## [1] 7.559&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;mean&lt;/span&gt;(sleep$sleep.time)/&lt;span class=&quot;dv&quot;&gt;3600&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;## [1] 6.873&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;mean&lt;/span&gt;(sleep$efficiency)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;## [1] 86.63&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can also plot sleep duration and efficiency across the week:&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;par&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;mar =&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;c&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;))
&lt;span class=&quot;kw&quot;&gt;plot&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;round_date&lt;/span&gt;(sleep$rise.time, &lt;span class=&quot;st&quot;&gt;&amp;quot;day&amp;quot;&lt;/span&gt;), sleep$efficiency, &lt;span class=&quot;dt&quot;&gt;type =&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;o&amp;quot;&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;col =&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;blue&amp;quot;&lt;/span&gt;, 
    &lt;span class=&quot;dt&quot;&gt;xlab =&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;Morning&amp;quot;&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;ylab =&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;NA&lt;/span&gt;)
&lt;span class=&quot;kw&quot;&gt;par&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;new =&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;TRUE&lt;/span&gt;)
&lt;span class=&quot;kw&quot;&gt;plot&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;round_date&lt;/span&gt;(sleep$rise.time, &lt;span class=&quot;st&quot;&gt;&amp;quot;day&amp;quot;&lt;/span&gt;), sleep$sleep.time/&lt;span class=&quot;dv&quot;&gt;3600&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;type =&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;o&amp;quot;&lt;/span&gt;, 
    &lt;span class=&quot;dt&quot;&gt;col =&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;red&amp;quot;&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;axes =&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;FALSE&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;ylab =&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;NA&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;xlab =&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;NA&lt;/span&gt;)
&lt;span class=&quot;kw&quot;&gt;axis&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;side =&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;)
&lt;span class=&quot;kw&quot;&gt;mtext&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;side =&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;line =&lt;/span&gt; &lt;span class=&quot;fl&quot;&gt;2.5&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;col =&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;red&amp;quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;quot;Sleep duration&amp;quot;&lt;/span&gt;)
&lt;span class=&quot;kw&quot;&gt;mtext&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;side =&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;line =&lt;/span&gt; &lt;span class=&quot;fl&quot;&gt;2.5&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;col =&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;blue&amp;quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;quot;Sleep efficiency&amp;quot;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&quot;figure&quot;&gt;
&lt;img src=&quot;http://dl.dropbox.com/u/3356641/blogstuff/dixondates.png&quot; alt=&quot;plot of chunk unnamed-chunk-50&quot; /&gt;&lt;p class=&quot;caption&quot;&gt;plot of chunk unnamed-chunk-50&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id=&quot;more-resources-on-times-and-dates&quot;&gt;More resources on times and dates&lt;/h2&gt;
&lt;p&gt;date and time tutorials for R:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.stat.berkeley.edu/classes/s133/dates.html&quot;&gt;http://www.stat.berkeley.edu/classes/s133/dates.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://science.nature.nps.gov/im/datamgmt/statistics/r/fundamentals/dates.cfm&quot;&gt;http://science.nature.nps.gov/im/datamgmt/statistics/r/fundamentals/dates.cfm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://en.wikibooks.org/wiki/R_Programming/Times_and_Dates&quot;&gt;http://en.wikibooks.org/wiki/R_Programming/Times_and_Dates&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;lubridate:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.jstatsoft.org/v40/i03/paper&quot;&gt;http://www.jstatsoft.org/v40/i03/paper&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;time zone and daylight saving time info:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.timeanddate.com/&quot;&gt;http://www.timeanddate.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/List_of_tz_database_time_zones&quot;&gt;http://en.wikipedia.org/wiki/List_of_tz_database_time_zones&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.twinsun.com/tz/tz-link.htm&quot;&gt;http://www.twinsun.com/tz/tz-link.htm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Also see the R help file at ?Sys.timezone&lt;/li&gt;
&lt;/ul&gt;</content>
 </entry>
 
 <entry>
   <title>Ryan Peek on Creating Shiny Apps</title>
   <link href="http://www.noamross.net/blog/2014/1/28/rpeekshiny.html"/>
   <updated>2014-01-28T09:41:36-08:00</updated>
   <id>hhttp://www.noamross.net/blog/2014/1/28/rpeekshiny</id>
   <content type="html">&lt;head&gt;
  &lt;style type=&quot;text/css&quot;  media=&quot;all&quot;&gt;
    table tbody {border-top:2px; border-bottom:2px;}
    table thead {border-bottom:1px;}
  &lt;/style&gt;
&lt;/head&gt; &lt;p&gt;Yesterday at the &lt;a href=&quot;http://www.noamross.net/davis-r-users-group.html&quot;&gt;Davis R User’s Group&lt;/a&gt;&lt;a href=&quot;#fn1&quot; class=&quot;footnoteRef&quot; id=&quot;fnref1&quot;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;, &lt;a href=&quot;https://watershed.ucdavis.edu/people/rapeek?destination=user/71&quot;&gt;Ryan Peek&lt;/a&gt; gave a talk about using the &lt;code&gt;shiny&lt;/code&gt; package to create interactive web apps with R. Here are his slides. Ryan includes a bunch of links to examples and tutorials, as well as his own &lt;a href=&quot;http://aquapeek.shinyapps.io/thermohydrographs/&quot;&gt;thermohydrographs app&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&quot;rpres&quot; style=&quot;padding-bottom: 88%;&quot;&gt;&lt;iframe src=&quot;http://dl.dropbox.com/u/3356641/blogstuff/DRUG_shiny_2014-01-27_presentation.html&quot;
frameborder=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;

&lt;div class=&quot;footnotes&quot;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&quot;fn1&quot;&gt;&lt;p&gt;Thanks to &lt;a href=&quot;http://www.revolutionanalytics.com/&quot;&gt;Revolution Analytics&lt;/a&gt; for another year of sponsorship!&lt;a href=&quot;#fnref1&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content>
 </entry>
 
 <entry>
   <title>Dynamic Optimization in An Equation-Free Framework</title>
   <link href="http://www.noamross.net/blog/2014/1/22/eqnfree-writeup.html"/>
   <updated>2014-01-22T09:46:27-08:00</updated>
   <id>hhttp://www.noamross.net/blog/2014/1/22/eqnfree-writeup</id>
   <content type="html">&lt;head&gt;
  &lt;style type=&quot;text/css&quot;  media=&quot;all&quot;&gt;
    table tbody {border-top:2px; border-bottom:2px;}
    table thead {border-bottom:1px;}
  &lt;/style&gt;
&lt;/head&gt; &lt;p&gt;Many ecological processes are best represented by individual-based models (IBMs), where processes at the scale of individual scale of organisms and their actions are modeled explicitly. Such processes can pose a problem for management or control; our observational scale, control levers, or management goals may be limited to coarser scales than the individual.&lt;/p&gt;
&lt;p&gt;IBMs suffer from the curse of dimensionality. The number of possible states of the system, which consists of the possible states and combinations thereof of all individuals, is enormous. This makes it difficult to apply control techniques or various levels of system analysis.&lt;/p&gt;
&lt;p&gt;One approach to this problem is to apply optimal control techniques to an aggregrated model (AM) that represents an IBM at the population with some loss of accuracy &lt;span class=&quot;citation&quot;&gt;[@Federico2013]&lt;/span&gt;. These techniques require an AM that adequately approximates the IBM, though. In particular, it can fail in cases of structured, heterogenous populations of individuals.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;citation&quot;&gt;@Kevrekidis2009a&lt;/span&gt; describe a set of methods for analyzing IBM-like systems at scales coarser than the individual. In this approach, one contructs a “coarse time-stepper” that simulates the evolution of the system through time at the population level. This stepper consists of an IBM, a “lifting” function, and a “restriction” function. The functions translate between coarse and individual scales. The “restriction” function summarizes the distribution of individuals in small set of moments. The “lifting” function generates distributions of individuals from these moments. Short bursts of the IBM simulate the system in between. The time stepper can be used to estimate derivatives of the coarse-level system. Where IBMs are stochastic, this can be accomplished by repeated lifting and bursts of the IBM to obtain mean values.&lt;/p&gt;
&lt;p&gt;This approach, known as “equation-free” or “multi-scale” modeling, allows simulation at coarse scale by forward integration of the estimated derivatives rather than full simulation of the IBM. The coarse time stepper can also be used for other numeric analyses, such as mapping equilibria and bifurcation points of the system. Equation-free modeling was developed for simulation of systems in physical chemistry, where molecular-level interactions had to be simulated at the “beaker” level. In the ecological context, it has been applied to swarm dynamics &lt;span class=&quot;citation&quot;&gt;[@Raghib2010a]&lt;/span&gt; and the evolution of strains of disease &lt;span class=&quot;citation&quot;&gt;[@Cisternas2004]&lt;/span&gt;. The technique hinges on careful selection of the coarse-scale variables, and a separation of time scales between these variables and higher moments of the distributions of individuals, which must come into equilibrium under short bursts of the IBM.&lt;/p&gt;
&lt;p&gt;Here I propose an application of equation-free techniques to optimal control in an ecological context.&lt;/p&gt;
&lt;h2 id=&quot;spatial-point-processes&quot;&gt;Spatial point processes&lt;/h2&gt;
&lt;p&gt;&lt;span class=&quot;citation&quot;&gt;@Brown2004&lt;/span&gt; describe a &lt;em&gt;spatial point process&lt;/em&gt; which represents the dynamics of a disease spread through a plant population. Plants are represented as discrete points in continuous space, and each individuals’ infection and mortality are discrete events that occur in continuous time. Specifically, a suseptible individual may be converted to an infected one at a probability which is the sum of the force of infection from all other infected individuals, weighted by a disease disperal kernel. For any individual, infection is a Poisson process, where infection occurs at random times driven by a mean rate, as is mortality, which occurs at fixed rate for infected individuals. At the population level, the dynamics of the disease can be approximated by a set of differential equations:&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math&quot;&gt;&lt;img style=&quot;vertical-align:middle&quot; src=&quot;http://latex.codecogs.com/png.latex?\inline \def\CSI{\mathcal C_{SI}} \def\dCSI{\dot{\mathcal{C}}_{SI}}&quot; alt=&quot;\def\CSI{\mathcal C_{SI}} \def\dCSI{\dot{\mathcal{C}}_{SI}}&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math&quot;&gt;\[\begin{aligned} 
  \dot S &amp;amp;= -\beta (1 + \CSI) SI - \alpha S \\
  \dot I &amp;amp;= \beta (1 + \CSI) SI + \alpha S - \mu I \\
  \dCSI &amp;amp;= f(S, I, \CSI, \ldots)
\end{aligned}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Here &lt;span class=&quot;math&quot;&gt;&lt;img style=&quot;vertical-align:middle&quot; src=&quot;http://latex.codecogs.com/png.latex?\inline S&quot; alt=&quot;S&quot; /&gt;&lt;/span&gt; and &lt;span class=&quot;math&quot;&gt;&lt;img style=&quot;vertical-align:middle&quot; src=&quot;http://latex.codecogs.com/png.latex?\inline I&quot; alt=&quot;I&quot; /&gt;&lt;/span&gt; are the populations of suseptible and infected individuals, &lt;span class=&quot;math&quot;&gt;&lt;img style=&quot;vertical-align:middle&quot; src=&quot;http://latex.codecogs.com/png.latex?\inline \beta&quot; alt=&quot;\beta&quot; /&gt;&lt;/span&gt; is the overall contact rate between them and &lt;span class=&quot;math&quot;&gt;&lt;img style=&quot;vertical-align:middle&quot; src=&quot;http://latex.codecogs.com/png.latex?\inline \alpha&quot; alt=&quot;\alpha&quot; /&gt;&lt;/span&gt; the background infection rate from exogenous spore pressure, and &lt;span class=&quot;math&quot;&gt;&lt;img style=&quot;vertical-align:middle&quot; src=&quot;http://latex.codecogs.com/png.latex?\inline \mu&quot; alt=&quot;\mu&quot; /&gt;&lt;/span&gt; is the mortality rate for diseased plants. &lt;span class=&quot;math&quot;&gt;&lt;img style=&quot;vertical-align:middle&quot; src=&quot;http://latex.codecogs.com/png.latex?\inline \CSI&quot; alt=&quot;\CSI&quot; /&gt;&lt;/span&gt; is a spatial covariance term. It is essentially the integral of the distribution of distances between pairs of plants, weighted by the dispersal kernel of the disease.&lt;/p&gt;
&lt;p&gt;The evolution of &lt;span class=&quot;math&quot;&gt;&lt;img style=&quot;vertical-align:middle&quot; src=&quot;http://latex.codecogs.com/png.latex?\inline \CSI&quot; alt=&quot;\CSI&quot; /&gt;&lt;/span&gt; can not described by a closed-form equation. It must be simulated at the individual scale and depends on the particular arrangement in space of individuals. However, using the equation-free framework, we can construct a coarse-time stepper that estimates &lt;span class=&quot;math&quot;&gt;&lt;img style=&quot;vertical-align:middle&quot; src=&quot;http://latex.codecogs.com/png.latex?\inline \Delta S, \Delta I&quot; alt=&quot;\Delta S, \Delta I&quot; /&gt;&lt;/span&gt;, and &lt;span class=&quot;math&quot;&gt;&lt;img style=&quot;vertical-align:middle&quot; src=&quot;http://latex.codecogs.com/png.latex?\inline \Delta \CSI&quot; alt=&quot;\Delta \CSI&quot; /&gt;&lt;/span&gt; over short intervals.&lt;/p&gt;
&lt;h2 id=&quot;control-of-the-spatial-point-process&quot;&gt;Control of the spatial point process&lt;/h2&gt;
&lt;p&gt;In addition to the internal system dynamics, we also introduce a control variable, &lt;span class=&quot;math&quot;&gt;&lt;img style=&quot;vertical-align:middle&quot; src=&quot;http://latex.codecogs.com/png.latex?\inline h&quot; alt=&quot;h&quot; /&gt;&lt;/span&gt;, which represents a harvest of plants:&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math&quot;&gt;\[\def\CSI{\mathcal C_{SI}}
\def\dCSI{\dot{\mathcal{C}}_{SI}}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math&quot;&gt;\[\begin{aligned} 
  \dot S &amp;amp;= -\beta (1 + \CSI) SI - \alpha S - h S \\
  \dot I &amp;amp;= \beta (1 + \CSI) SI + \alpha S - \mu I - h I \\
  \dCSI &amp;amp;= f(S, I, \CSI, h, \ldots)
\end{aligned}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Managers may harvest plants in order to reduce rate of disease-induced mortality. Plants provide an ecosystem service continuously (&lt;span class=&quot;math&quot;&gt;&lt;img style=&quot;vertical-align:middle&quot; src=&quot;http://latex.codecogs.com/png.latex?\inline \gamma&quot; alt=&quot;\gamma&quot; /&gt;&lt;/span&gt; per plant per unit time) as long as they are alive, which managers want to maximize. However, the only tool they have at their disposal (in this sylized model) is harvesting the plant population to reduce contact rates, irrespective of plant disease status. Harvesting occurs at a rate &lt;span class=&quot;math&quot;&gt;&lt;img style=&quot;vertical-align:middle&quot; src=&quot;http://latex.codecogs.com/png.latex?\inline h&quot; alt=&quot;h&quot; /&gt;&lt;/span&gt;, the portion of plants removed per unit time, and the cost are &lt;span class=&quot;math&quot;&gt;&lt;img style=&quot;vertical-align:middle&quot; src=&quot;http://latex.codecogs.com/png.latex?\inline c(S+I)&quot; alt=&quot;c(S+I)&quot; /&gt;&lt;/span&gt;, where &lt;span class=&quot;math&quot;&gt;&lt;img style=&quot;vertical-align:middle&quot; src=&quot;http://latex.codecogs.com/png.latex?\inline c&quot; alt=&quot;c&quot; /&gt;&lt;/span&gt; is the cost of removing a plant.&lt;/p&gt;
&lt;p&gt;The (current-value) Hamiltonian equation of this system is:&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math&quot;&gt;\[\begin{aligned}
  \mathcal H = &amp;amp;\gamma S + \gamma I - chS - chI + 
               \lambda_1 (-\beta (1 + \CSI) SI - \alpha S - h S) + \\
               &amp;amp;\lambda_2 (\beta (1 + \CSI) SI + \alpha S - \mu I - h I)  + 
               \lambda_3 (f(\cdot))
\end{aligned}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;The final term, &lt;span class=&quot;math&quot;&gt;&lt;img style=&quot;vertical-align:middle&quot; src=&quot;http://latex.codecogs.com/png.latex?\inline \lambda_3 (f(\cdot))&quot; alt=&quot;\lambda_3 (f(\cdot))&quot; /&gt;&lt;/span&gt;, represents the shadow price of the spatial correlation, or the value of having the individuals arranged in their particular configuration. We can determine the evolution of the shadow prices by differentiating &lt;span class=&quot;math&quot;&gt;&lt;img style=&quot;vertical-align:middle&quot; src=&quot;http://latex.codecogs.com/png.latex?\inline \mathcal H&quot; alt=&quot;\mathcal H&quot; /&gt;&lt;/span&gt;:&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math&quot;&gt;\[\begin{aligned}
\frac{\partial \lambda_1}{\partial t} = 
  -\frac{\partial \mathcal H}{\partial S} - \delta \lambda_1 &amp;amp;=
  -\gamma + ch -\lambda_1 (-\beta (1 + \CSI) I - \alpha - h - \delta)
  - \lambda_2 (\beta (1 + \CSI) I + \alpha)
  - \lambda_3 \left(\frac{\partial f}{\partial S}\right) \\
\frac{\partial \lambda_2}{\partial t} = 
  -\frac{\partial \mathcal H}{\partial I} - \delta \lambda_2 &amp;amp;=
  -\gamma + ch - \lambda_1 (-\beta (1 + \CSI) S)
  -\lambda_2 (\beta (1 + \CSI + \delta) S - \mu - h)
  - \lambda_3 \left(\frac{\partial f}{\partial I}\right) \\
\frac{\partial \lambda_3}{\partial t} = 
  -\frac{\partial \mathcal H}{\partial \CSI} - \delta \lambda_3  &amp;amp;=
  -\lambda_1 (-\beta SI) - \lambda_2(\beta SI)
  - \lambda_3 \left(\frac{\partial f}{\partial \CSI} + \delta \right)
\end{aligned}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;(With &lt;span class=&quot;math&quot;&gt;&lt;img style=&quot;vertical-align:middle&quot; src=&quot;http://latex.codecogs.com/png.latex?\inline \delta&quot; alt=&quot;\delta&quot; /&gt;&lt;/span&gt; being the discount rate)&lt;/p&gt;
&lt;p&gt;The derivatives of &lt;span class=&quot;math&quot;&gt;&lt;img style=&quot;vertical-align:middle&quot; src=&quot;http://latex.codecogs.com/png.latex?\inline f&quot; alt=&quot;f&quot; /&gt;&lt;/span&gt; in these equations can be approximated if our forward integration scheme estimates the second derivative of &lt;span class=&quot;math&quot;&gt;&lt;img style=&quot;vertical-align:middle&quot; src=&quot;http://latex.codecogs.com/png.latex?\inline \CSI&quot; alt=&quot;\CSI&quot; /&gt;&lt;/span&gt;, which it will if the forward integrator uses a polynomial scheme.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math&quot;&gt;\[\frac{\partial f}{\partial S} = 
  \frac{\partial f / \partial t}{\partial S / \partial t}  \approx
  \frac{\Delta \dCSI}{\Delta S}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;For any of the derivatives above, though, we require &lt;span class=&quot;math&quot;&gt;&lt;img style=&quot;vertical-align:middle&quot; src=&quot;http://latex.codecogs.com/png.latex?\inline h&quot; alt=&quot;h&quot; /&gt;&lt;/span&gt;, which can be calculated using the maximum principle:&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math&quot;&gt;\[\begin{aligned}
    &amp;amp;\frac{\partial \mathcal H}{\partial h} = -cS - cI + \lambda_1 S + \lambda_2 I + 
    \lambda_3 \left(\frac{\partial f}{\partial h}\right) = 0 \\
    &amp;amp;\frac{\partial f}{\partial h} -
    \frac{S(c - \lambda_1) + I(c - \lambda_2)}{\lambda_3} = 0
\end{aligned}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Here we must approximate &lt;span class=&quot;math&quot;&gt;&lt;img style=&quot;vertical-align:middle&quot; src=&quot;http://latex.codecogs.com/png.latex?\inline h&quot; alt=&quot;h&quot; /&gt;&lt;/span&gt; by using a Newton-type method where we calculate &lt;span class=&quot;math&quot;&gt;&lt;img style=&quot;vertical-align:middle&quot; src=&quot;http://latex.codecogs.com/png.latex?\inline \partial f / \partial h&quot; alt=&quot;\partial f / \partial h&quot; /&gt;&lt;/span&gt; by finite differences, repeated calling the time-stepper. This may be the most numerically costly and challenging component of the scheme, especially when the time-stepper is stochastic.&lt;/p&gt;
&lt;p&gt;With the above calculations, we can wrap the Hamiltonian set of ODEs, in a differential equation solver, and additionally in a boundary value solver to determine optimal paths.&lt;/p&gt;
&lt;p&gt;I note that this scheme requires that the IBM have an explicit implementation of a “lifting function” for the harvest variable. This could take many potential forms which would correspond to different harvest “strategies”. That is, there are many ways that plants could be harvested from the spatial point distribution for any given rate: randomly, in a fixed or responsive spatial pattern, etc. This optimization can only find the best harvest path for any given “strategy”.&lt;/p&gt;
&lt;h2 id=&quot;generalization&quot;&gt;Generalization&lt;/h2&gt;
&lt;p&gt;This approach should be applicable to similar systems where there is a tractable profit function at the coarse scale &lt;span class=&quot;math&quot;&gt;&lt;img style=&quot;vertical-align:middle&quot; src=&quot;http://latex.codecogs.com/png.latex?\inline (\pi)&quot; alt=&quot;(\pi)&quot; /&gt;&lt;/span&gt; but where the evolution of the system can only be simulated by a “black box” function &lt;span class=&quot;math&quot;&gt;&lt;img style=&quot;vertical-align:middle&quot; src=&quot;http://latex.codecogs.com/png.latex?\inline (f)&quot; alt=&quot;(f)&quot; /&gt;&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math&quot;&gt;&lt;div style=&quot;text-align:center;&quot;&gt;&lt;img src=&quot;http://latex.codecogs.com/png.latex?\dot S = f(S, h)&quot; alt=&quot;\dot S = f(S, h)&quot; /&gt;&lt;/div&gt;&lt;/span&gt; &lt;span class=&quot;math&quot;&gt;&lt;div style=&quot;text-align:center;&quot;&gt;&lt;img src=&quot;http://latex.codecogs.com/png.latex?\mathcal H = \pi(S, h) + \lambda f(\cdot)&quot; alt=&quot;\mathcal H = \pi(S, h) + \lambda f(\cdot)&quot; /&gt;&lt;/div&gt;&lt;/span&gt; &lt;span class=&quot;math&quot;&gt;\[\frac{\partial \lambda}{\partial t} = 
  -\frac{\partial \pi}{\partial S} 
  -\lambda \left(\frac{\partial f}{\partial S} - \delta \right)
  \approx -\frac{\partial \pi}{\partial S} 
  -\lambda \left(\frac{\Delta \dot S}{\Delta S} - \delta \right)\]&lt;/span&gt; &lt;span class=&quot;math&quot;&gt;&lt;div style=&quot;text-align:center;&quot;&gt;&lt;img src=&quot;http://latex.codecogs.com/png.latex?h^* = h \text{ given } \left\{\frac{\partial \pi}{\partial h} + \lambda \frac{\partial f}{\partial h} = 0\right\}&quot; alt=&quot;h^* = h \text{ given } \left\{\frac{\partial \pi}{\partial h} + \lambda \frac{\partial f}{\partial h} = 0\right\}&quot; /&gt;&lt;/div&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&quot;questions-and-next-steps&quot;&gt;Questions and Next Steps&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Has something like this been implemented before? I think the multi-scale approach combined with optimal control such as this is novel, but I would not be surprised if a numerical approach had been taking to solving adjoint and maximum equations before.&lt;/li&gt;
&lt;li&gt;I’m working on implementing a coarse time-stepper for the spatial point process. The thorniest part here is generating a sample spatial point fields from a given &lt;span class=&quot;math&quot;&gt;&lt;img style=&quot;vertical-align:middle&quot; src=&quot;http://latex.codecogs.com/png.latex?\inline \CSI&quot; alt=&quot;\CSI&quot; /&gt;&lt;/span&gt; value. This will probably be the computational bottleneck so I’m working on an efficient approach for it. From there I’ll work on the algorithm from the inside out.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;</content>
 </entry>
 
 <entry>
   <title>How to format plots for publication using ggplot2 (with some help from Inkscape)</title>
   <link href="http://www.noamross.net/blog/2013/11/20/formatting-plots-for-pubs.html"/>
   <updated>2013-11-20T19:51:47-08:00</updated>
   <id>hhttp://www.noamross.net/blog/2013/11/20/formatting-plots-for-pubs</id>
   <content type="html">&lt;head&gt;
  &lt;style type=&quot;text/css&quot;  media=&quot;all&quot;&gt;
    table tbody {border-top:2px; border-bottom:2px;}
    table thead {border-bottom:1px;}
  &lt;/style&gt;
&lt;/head&gt; &lt;p&gt;&lt;strong&gt;&lt;em&gt;The following is the code from a presentation made by Rosemary Hartman to the &lt;a href=&quot;http://www.noamross.net/davis-r-users-group.html&quot;&gt;Davis R Users’ Group&lt;/a&gt;. I’ve run the code through the &lt;code&gt;spin&lt;/code&gt; function in &lt;code&gt;knitr&lt;/code&gt; to produce this post. Download the script to walk through &lt;a href=&quot;https://gist.github.com/noamross/7576436&quot;&gt;here&lt;/a&gt;.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;First, make your plot. I am going to use the data already in R about sleep habits of different animals. It’s the same one Noam used for &lt;a href=&quot;http://www.noamross.net/blog/2012/10/5/ggplot-introduction.html&quot;&gt;his intro to ggplot.&lt;/a&gt;&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;library&lt;/span&gt;(ggplot2)
&lt;span class=&quot;kw&quot;&gt;str&lt;/span&gt;(msleep)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;## &amp;#39;data.frame&amp;#39;:    83 obs. of  11 variables:
##  $ name        : chr  &amp;quot;Cheetah&amp;quot; &amp;quot;Owl monkey&amp;quot; &amp;quot;Mountain beaver&amp;quot; &amp;quot;Greater short-tailed shrew&amp;quot; ...
##  $ genus       : chr  &amp;quot;Acinonyx&amp;quot; &amp;quot;Aotus&amp;quot; &amp;quot;Aplodontia&amp;quot; &amp;quot;Blarina&amp;quot; ...
##  $ vore        : Factor w/ 4 levels &amp;quot;carni&amp;quot;,&amp;quot;herbi&amp;quot;,..: 1 4 2 4 2 2 1 NA 1 2 ...
##  $ order       : chr  &amp;quot;Carnivora&amp;quot; &amp;quot;Primates&amp;quot; &amp;quot;Rodentia&amp;quot; &amp;quot;Soricomorpha&amp;quot; ...
##  $ conservation: Factor w/ 7 levels &amp;quot;&amp;quot;,&amp;quot;cd&amp;quot;,&amp;quot;domesticated&amp;quot;,..: 5 NA 6 5 3 NA 7 NA 3 5 ...
##  $ sleep_total : num  12.1 17 14.4 14.9 4 14.4 8.7 7 10.1 3 ...
##  $ sleep_rem   : num  NA 1.8 2.4 2.3 0.7 2.2 1.4 NA 2.9 NA ...
##  $ sleep_cycle : num  NA NA NA 0.133 0.667 ...
##  $ awake       : num  11.9 7 9.6 9.1 20 9.6 15.3 17 13.9 21 ...
##  $ brainwt     : num  NA 0.0155 NA 0.00029 0.423 NA NA NA 0.07 0.0982 ...
##  $ bodywt      : num  50 0.48 1.35 0.019 600 ...&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s say we have written a groundbreaking paper on the relationship between body size and sleep time. Therefore, we want to present a plot of the log of body weight by the total sleep time&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;sleepplot =&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;ggplot&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;data =&lt;/span&gt; msleep, &lt;span class=&quot;kw&quot;&gt;aes&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;x =&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;log&lt;/span&gt;(bodywt), &lt;span class=&quot;dt&quot;&gt;y =&lt;/span&gt; sleep_total)) +&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;geom_point&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;aes&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;color =&lt;/span&gt; vore))
sleepplot&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&quot;figure&quot;&gt;
&lt;img src=&quot;http://dl.dropbox.com/u/3356641/blogstuff/roseplot-2.png&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;We made a beautiful model of this relationship&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;slp =&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;lm&lt;/span&gt;(sleep_total ~&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;log&lt;/span&gt;(bodywt), &lt;span class=&quot;dt&quot;&gt;data =&lt;/span&gt; msleep)
&lt;span class=&quot;kw&quot;&gt;summary&lt;/span&gt;(slp)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;## 
## Call:
## lm(formula = sleep_total ~ log(bodywt), data = msleep)
## 
## Residuals:
##    Min     1Q Median     3Q    Max 
## -6.499 -2.567 -0.168  2.047 10.193 
## 
## Coefficients:
##             Estimate Std. Error t value Pr(&amp;gt;|t|)    
## (Intercept)   11.089      0.418   26.54   &amp;lt;2e-16 ***
## log(bodywt)   -0.777      0.125   -6.22    2e-08 ***
## ---
## Signif. codes:  0 &amp;#39;***&amp;#39; 0.001 &amp;#39;**&amp;#39; 0.01 &amp;#39;*&amp;#39; 0.05 &amp;#39;.&amp;#39; 0.1 &amp;#39; &amp;#39; 1
## 
## Residual standard error: 3.68 on 81 degrees of freedom
## Multiple R-squared:  0.323,  Adjusted R-squared:  0.315 
## F-statistic: 38.7 on 1 and 81 DF,  p-value: 2.05e-08&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s put the model on the plot&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;sleepplot =&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;sleepplot +&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;geom_abline&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;intercept =&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;coef&lt;/span&gt;(slp)[&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;], &lt;span class=&quot;dt&quot;&gt;slope =&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;coef&lt;/span&gt;(slp)[&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;])
sleepplot&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&quot;figure&quot;&gt;
&lt;img src=&quot;http://dl.dropbox.com/u/3356641/blogstuff/roseplot-4.png&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;It’s beautiful! I love it! Unfortunately, you want to submit to Science (you might as well aim high), and this is what they say about figures: &lt;a href=&quot;http://www.sciencemag.org/site/feature/contribinfo/prep/prep_subfigs.xhtml&quot;&gt;http://www.sciencemag.org/site/feature/contribinfo/prep/prep_subfigs.xhtml&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So we have several problems:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;gray background&lt;/li&gt;
&lt;li&gt;Poor labels (need units, capital letters, larger font on axes)&lt;/li&gt;
&lt;li&gt;Poor legend&lt;/li&gt;
&lt;li&gt;Poor color scheme (avoid red and green together, more contrast needed)&lt;/li&gt;
&lt;li&gt;Not correct file format or resolution (want a PDF with at least 600dpi)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;First make the labels a little more useful.&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;sleepplot =&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;sleepplot +&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;labs&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;x =&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;Log body weight (Kg)&amp;quot;&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;y =&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;Time asleep (hrs/day)&amp;quot;&lt;/span&gt;)
sleepplot&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&quot;figure&quot;&gt;
&lt;img src=&quot;http://dl.dropbox.com/u/3356641/blogstuff/roseplot-5.png&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;Now let’s fix the legend. You would think you do this with some sort of “legend” command, but &lt;em&gt;no&lt;/em&gt;, what you are looking for is “scale”.&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;sleepplot +&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;scale_color_discrete&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;name =&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;Functional&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;st&quot;&gt; feeding group&amp;quot;&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;labels =&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;c&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;carnivore&amp;quot;&lt;/span&gt;, 
    &lt;span class=&quot;st&quot;&gt;&amp;quot;herbivore&amp;quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;quot;insectivore&amp;quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;quot;omnivore&amp;quot;&lt;/span&gt;))&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&quot;figure&quot;&gt;
&lt;img src=&quot;http://dl.dropbox.com/u/3356641/blogstuff/roseplot-6.png&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;If you haven’t figured it out yet, putting “&lt;code&gt;\n&lt;/code&gt;” in a text string gives you a line break. It took me WAY to long to discover that.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ggplot&lt;/code&gt; automatically gives you evenly spaced hues for color variations, but this is not necessarily the best way to get a good contrasting color scheme. You may want to try &lt;code&gt;scale_color_brewer&lt;/code&gt; for better contrasts. See &lt;a href=&quot;http://colorbrewer2.org&quot;&gt;http://colorbrewer2.org&lt;/a&gt; for more information.&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;sleepplot +&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;scale_color_brewer&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;name =&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;Functional &lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;st&quot;&gt; feeding group&amp;quot;&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;labels =&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;c&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;carnivore&amp;quot;&lt;/span&gt;, 
    &lt;span class=&quot;st&quot;&gt;&amp;quot;herbivore&amp;quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;quot;insectivore&amp;quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;quot;omnivore&amp;quot;&lt;/span&gt;), &lt;span class=&quot;dt&quot;&gt;type =&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;qual&amp;quot;&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;palette =&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&quot;figure&quot;&gt;
&lt;img src=&quot;http://dl.dropbox.com/u/3356641/blogstuff/roseplot-7.png&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;Oh, crap! Color figures cost an extra $700 on top of the normal page charges! Let’s try something else:&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;sleepplot2 =&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;ggplot&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;data =&lt;/span&gt; msleep, &lt;span class=&quot;kw&quot;&gt;aes&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;x =&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;log&lt;/span&gt;(bodywt), &lt;span class=&quot;dt&quot;&gt;y =&lt;/span&gt; sleep_total)) +&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;
&lt;span class=&quot;st&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;geom_point&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;aes&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;shape=&lt;/span&gt;vore), &lt;span class=&quot;dt&quot;&gt;size=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;) +&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;co&quot;&gt;#&amp;#39; This time we will vary the feeding groups by shapes instead of colors&lt;/span&gt;
&lt;span class=&quot;st&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;geom_abline&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;intercept=&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;coef&lt;/span&gt;(slp)[&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;], &lt;span class=&quot;dt&quot;&gt;slope=&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;coef&lt;/span&gt;(slp)[&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;])
  sleepplot2&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&quot;figure&quot;&gt;
&lt;img src=&quot;http://dl.dropbox.com/u/3356641/blogstuff/roseplot-8.png&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;Now to fix the labels and legend again:&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;sleepplot2 =&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;sleepplot2 +&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;labs&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;x =&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;Log body weight (Kg)&amp;quot;&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;y =&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;Time asleep (hrs/day)&amp;quot;&lt;/span&gt;) +&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;
&lt;span class=&quot;st&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;co&quot;&gt;#&amp;#39; we will use scale_shape_discrete instead of scale_color_discrete&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;scale_shape_discrete&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;name =&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;Functional &lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;st&quot;&gt; feeding group&amp;quot;&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;labels =&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;c&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;carnivore&amp;quot;&lt;/span&gt;, 
    &lt;span class=&quot;st&quot;&gt;&amp;quot;herbivore&amp;quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;quot;insectivore&amp;quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;quot;omnivore&amp;quot;&lt;/span&gt;))
sleepplot2&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&quot;figure&quot;&gt;
&lt;img src=&quot;http://dl.dropbox.com/u/3356641/blogstuff/roseplot-9.png&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;Now, let’s work on how the plot looks overall.&lt;/p&gt;
&lt;p&gt;ggplot uses “themes” to adjust plot appearence without changes the actual presentation of the data.&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;sleepplot2 +&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;theme_bw&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;base_size =&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;12&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;base_family =&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;Helvetica&amp;quot;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&quot;figure&quot;&gt;
&lt;img src=&quot;http://dl.dropbox.com/u/3356641/blogstuff/roseplot-10.png&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;&lt;code&gt;theme_bw()&lt;/code&gt; will get rid of the background, and gives you options to change the font. Science recomends Helvetica, wich happens to be R’s default, but we will specify it here anyway.&lt;/p&gt;
&lt;p&gt;Check out the other fonts out here:&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;??postscriptFonts&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For even more fonts, see the &lt;code&gt;extrafont&lt;/code&gt; package.&lt;/p&gt;
&lt;p&gt;Other pre-set themes can change the look of your plot&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;sleepplot2 +&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;theme_minimal&lt;/span&gt;()&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&quot;figure&quot;&gt;
&lt;img src=&quot;http://dl.dropbox.com/u/3356641/blogstuff/roseplot-111.png&quot; /&gt;
&lt;/div&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;sleepplot2 +&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;theme_classic&lt;/span&gt;()&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&quot;figure&quot;&gt;
&lt;img src=&quot;http://dl.dropbox.com/u/3356641/blogstuff/roseplot-112.png&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;For more themes,&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;library&lt;/span&gt;(ggthemes)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you want to publish in the Wall Street Journal…&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;sleepplot2 +&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;theme_wsj&lt;/span&gt;()&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&quot;figure&quot;&gt;
&lt;img src=&quot;http://dl.dropbox.com/u/3356641/blogstuff/roseplot-13.png&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;But we want to publish in Science, not the Wall Street Journal, so let’s get back to our black and white theme.&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;sleepplot2 =&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;sleepplot2 +&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;theme_bw&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;base_size =&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;12&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;base_family =&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;Helvetica&amp;quot;&lt;/span&gt;)
sleepplot2&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&quot;figure&quot;&gt;
&lt;img src=&quot;http://dl.dropbox.com/u/3356641/blogstuff/roseplot-14.png&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;You can’t really see the gridlines with the &lt;code&gt;bw&lt;/code&gt; theme, so we are going to tweak the pre-set theme using the &lt;code&gt;theme&lt;/code&gt; function. &lt;code&gt;theme&lt;/code&gt; allows you to do all kinds of stuff involved with how the plot looks.&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;?theme&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;sleepplot2 +&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;
&lt;span class=&quot;st&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;co&quot;&gt;#increase size of gridlines&lt;/span&gt;
&lt;span class=&quot;st&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;theme&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;panel.grid.major =&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;element_line&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;size =&lt;/span&gt; .&lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;color =&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;grey&amp;quot;&lt;/span&gt;),
  &lt;span class=&quot;co&quot;&gt;#increase size of axis lines&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;axis.line =&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;element_line&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;size=&lt;/span&gt;.&lt;span class=&quot;dv&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;color =&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;black&amp;quot;&lt;/span&gt;),
  &lt;span class=&quot;co&quot;&gt;#Adjust legend position to maximize space, use a vector of proportion&lt;/span&gt;
  &lt;span class=&quot;co&quot;&gt;#across the plot and up the plot where you want the legend. &lt;/span&gt;
  &lt;span class=&quot;co&quot;&gt;#You can also use &amp;quot;left&amp;quot;, &amp;quot;right&amp;quot;, &amp;quot;top&amp;quot;, &amp;quot;bottom&amp;quot;, for legends on t&lt;/span&gt;
  &lt;span class=&quot;co&quot;&gt;#he side of the plot&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;legend.position =&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;c&lt;/span&gt;(.&lt;span class=&quot;dv&quot;&gt;85&lt;/span&gt;,.&lt;span class=&quot;dv&quot;&gt;7&lt;/span&gt;),
  &lt;span class=&quot;co&quot;&gt;#increase the font size&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;text =&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;element_text&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;size=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;14&lt;/span&gt;)) &lt;/code&gt;&lt;/pre&gt;
&lt;div class=&quot;figure&quot;&gt;
&lt;img src=&quot;http://dl.dropbox.com/u/3356641/blogstuff/roseplot-15.png&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;You can save this theme for later use&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;science_theme =&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;theme&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;panel.grid.major =&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;element_line&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;size =&lt;/span&gt; &lt;span class=&quot;fl&quot;&gt;0.5&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;color =&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;grey&amp;quot;&lt;/span&gt;), 
    &lt;span class=&quot;dt&quot;&gt;axis.line =&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;element_line&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;size =&lt;/span&gt; &lt;span class=&quot;fl&quot;&gt;0.7&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;color =&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;black&amp;quot;&lt;/span&gt;), &lt;span class=&quot;dt&quot;&gt;legend.position =&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;c&lt;/span&gt;(&lt;span class=&quot;fl&quot;&gt;0.85&lt;/span&gt;, 
        &lt;span class=&quot;fl&quot;&gt;0.7&lt;/span&gt;), &lt;span class=&quot;dt&quot;&gt;text =&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;element_text&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;size =&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;14&lt;/span&gt;))
sleepplot2 =&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;sleepplot2 +&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;science_theme
sleepplot2&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&quot;figure&quot;&gt;
&lt;img src=&quot;http://dl.dropbox.com/u/3356641/blogstuff/roseplot-16.png&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;That looks pretty good. Now we need to get it exported properly. The instructions say the figure should be sized to fit in one or two columns (2.3 or 4.6 inches), so we want them to look good at that resolution.&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;pdf&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;file =&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;sleepplot.pdf&amp;quot;&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;width=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;height =&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;co&quot;&gt;#&amp;#39; see how it looks at this size&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;useDingbats=&lt;/span&gt;F) &lt;span class=&quot;co&quot;&gt;#I have had trouble when uploading figures with digbats before, so I don&amp;#39;t use them&lt;/span&gt;
sleepplot2 &lt;span class=&quot;co&quot;&gt;#print our plot&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;dev.off&lt;/span&gt;() &lt;span class=&quot;co&quot;&gt;#stop making pdfs&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;## pdf 
##   2&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;a-few-other-tricks-to-improve-the-look-of-your-plots&quot;&gt;A few other tricks to improve the look of your plots:&lt;/h4&gt;
&lt;p&gt;Let’s say we are grouping things by categories instead of a regression&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;sleepcat =&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;ggplot&lt;/span&gt;(msleep, &lt;span class=&quot;kw&quot;&gt;aes&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;x =&lt;/span&gt; vore, &lt;span class=&quot;dt&quot;&gt;y =&lt;/span&gt; sleep_total, &lt;span class=&quot;dt&quot;&gt;color =&lt;/span&gt; conservation))
sleepcat +&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;geom_point&lt;/span&gt;()&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&quot;figure&quot;&gt;
&lt;img src=&quot;http://dl.dropbox.com/u/3356641/blogstuff/roseplot-18.png&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;It’s hard to see what’s going on there, so we can jitter the points to make them more visible.&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;sleepcat +&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;geom_point&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;position =&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;position_jitter&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;w =&lt;/span&gt; &lt;span class=&quot;fl&quot;&gt;0.1&lt;/span&gt;))&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&quot;figure&quot;&gt;
&lt;img src=&quot;http://dl.dropbox.com/u/3356641/blogstuff/roseplot-19.png&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;Maybe this would be better with averages and error bars instead of every point:&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;library&lt;/span&gt;(plyr)
msleepave =&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;ddply&lt;/span&gt;(msleep, .(vore, conservation), summarize, &lt;span class=&quot;dt&quot;&gt;meansleep =&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;mean&lt;/span&gt;(sleep_total), 
    &lt;span class=&quot;dt&quot;&gt;sdsleep =&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;sd&lt;/span&gt;(sleep_total)/&lt;span class=&quot;kw&quot;&gt;sqrt&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;22&lt;/span&gt;))
sleepmean =&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;ggplot&lt;/span&gt;(msleepave, &lt;span class=&quot;kw&quot;&gt;aes&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;x =&lt;/span&gt; vore, &lt;span class=&quot;dt&quot;&gt;y =&lt;/span&gt; meansleep, &lt;span class=&quot;dt&quot;&gt;color =&lt;/span&gt; conservation))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Plot it with means and error bars +/- 1 stadard deviation&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;sleepmean +&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;geom_point&lt;/span&gt;() +&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;geom_errorbar&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;aes&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;ymax =&lt;/span&gt; meansleep +&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;sdsleep, &lt;span class=&quot;dt&quot;&gt;ymin =&lt;/span&gt; meansleep +&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;
&lt;span class=&quot;st&quot;&gt;    &lt;/span&gt;sdsleep), &lt;span class=&quot;dt&quot;&gt;width =&lt;/span&gt; &lt;span class=&quot;fl&quot;&gt;0.2&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&quot;figure&quot;&gt;
&lt;img src=&quot;http://dl.dropbox.com/u/3356641/blogstuff/roseplot-21.png&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;Spread them out, but in an orderly fashion this time, with position_dodge rather than jitter&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;sleepmean +&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;geom_point&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;position =&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;position_dodge&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;width =&lt;/span&gt; &lt;span class=&quot;fl&quot;&gt;0.5&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;height =&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;), &lt;span class=&quot;dt&quot;&gt;size =&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;) +&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;
&lt;span class=&quot;st&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;geom_errorbar&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;aes&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;ymax =&lt;/span&gt; meansleep +&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;sdsleep, &lt;span class=&quot;dt&quot;&gt;ymin =&lt;/span&gt; meansleep -&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;sdsleep), 
        &lt;span class=&quot;dt&quot;&gt;position =&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;position_dodge&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;width =&lt;/span&gt; &lt;span class=&quot;fl&quot;&gt;0.5&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;height =&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;), &lt;span class=&quot;dt&quot;&gt;width =&lt;/span&gt; &lt;span class=&quot;fl&quot;&gt;0.5&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;## ymax not defined: adjusting position using y instead&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&quot;figure&quot;&gt;
&lt;img src=&quot;http://dl.dropbox.com/u/3356641/blogstuff/roseplot-22.png&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;Note that dodging the points gives the conservation status in the same order for each feeding type category. A little more organized.&lt;/p&gt;
&lt;h4 id=&quot;some-other-things-you-might-want-to-do-with-formatting&quot;&gt;Some other things you might want to do with formatting:&lt;/h4&gt;
&lt;p&gt;Add annotation to the plot&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;sleepplot2 +&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;annotate&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;text&amp;quot;&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;label =&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;R2 = 0.999&amp;quot;&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;x =&lt;/span&gt; -&lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;y =&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;17&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&quot;figure&quot;&gt;
&lt;img src=&quot;http://dl.dropbox.com/u/3356641/blogstuff/roseplot-23.png&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;Let’s put that annotation in italics&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;sleepplot2 +&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;annotate&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;text&amp;quot;&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;label =&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;R2 = 0.999&amp;quot;&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;x =&lt;/span&gt; -&lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;y =&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;17&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;fontface =&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&quot;figure&quot;&gt;
&lt;img src=&quot;http://dl.dropbox.com/u/3356641/blogstuff/roseplot-24.png&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;NOW. Let’s put half that annotation in italics, the other half plain, then insert five greek characters and rotate it 90 degrees!&lt;/p&gt;
&lt;p&gt;OR we can beat our head against a wall until it explodes and export our plot into an actual graphics program.&lt;/p&gt;
&lt;p&gt;Not everything has to be done in R. ‘SVG’ files are vector graphic files that can be easily edited in the FREE GUI-based program &lt;a href=&quot;http://inkscape.org/&quot;&gt;Inkscape&lt;/a&gt;. Make and SVG and you can edit it by hand for final tweaks. Inkscape can also edit and export PDFs.&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;svg&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;filename =&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;sleepplot.svg&amp;quot;&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;width =&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;height =&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;)
sleepplot2
&lt;span class=&quot;kw&quot;&gt;dev.off&lt;/span&gt;()&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;## pdf 
##   2&lt;/code&gt;&lt;/pre&gt;</content>
 </entry>
 
 <entry>
   <title>MBI Meeting Poster: Optimal Control of Forest Disease</title>
   <link href="http://www.noamross.net/blog/2013/11/7/mbi-poster-post.html"/>
   <updated>2013-11-07T22:20:40-08:00</updated>
   <id>hhttp://www.noamross.net/blog/2013/11/7/mbi-poster-post</id>
   <content type="html">&lt;head&gt;
  &lt;style type=&quot;text/css&quot;  media=&quot;all&quot;&gt;
    table tbody {border-top:2px; border-bottom:2px;}
    table thead {border-bottom:1px;}
  &lt;/style&gt;
&lt;/head&gt; &lt;p&gt;For the past week I’ve been at the &lt;a href=&quot;http://mbi.osu.edu/&quot;&gt;Mathematical Biosciences Institute&lt;/a&gt; at Ohio State, attending the &lt;a href=&quot;http://mbi.osu.edu/2013/ws3description.html&quot;&gt;Workshop on Sustainable Management of Living Natural Resources&lt;/a&gt;. It’s been an absolutely top-notch meeting. I need to get myself to more of these small workshops.&lt;/p&gt;
&lt;p&gt;I brought a poster describing some of my work in progress on managing Sudden Oak Death. Here it is, and it’s archived over at &lt;a href=&quot;http://dx.doi.org/10.6084/m9.figshare.833911&quot;&gt;Figshare&lt;/a&gt;.&lt;/p&gt;
&lt;iframe src=&quot;http://wl.figshare.com/articles/833911/embed?show_title=0&quot; width=&quot;568&quot; height=&quot;504&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;</content>
 </entry>
 
 <entry>
   <title>Some analytics: Does age structure matter for disease spread?</title>
   <link href="http://www.noamross.net/blog/2013/6/21/multi-infection-analytic.html"/>
   <updated>2013-06-21T13:58:39-07:00</updated>
   <id>hhttp://www.noamross.net/blog/2013/6/21/multi-infection-analytic</id>
   <content type="html">&lt;head&gt;
  &lt;style type=&quot;text/css&quot;  media=&quot;all&quot;&gt;
    table tbody {border-top:2px; border-bottom:2px;}
    table thead {border-bottom:1px;}
  &lt;/style&gt;
&lt;/head&gt; &lt;p&gt;My &lt;a href=&quot;http://www.noamross.net/blog/2013/6/11/multi-infection-tests.html&quot;&gt;first crack at an age-structured disease model with multiple infections&lt;/a&gt; yielded the interesting result that one could observe differences in disease rates across age without any actual differences in the biology between old and young individuals. Today I’m trying to answer a different question analytically: does age structure matter for the course of the disease in the whole population?&lt;/p&gt;
&lt;p&gt;Here’s the model. There are two minor changes: I no longer scale &lt;span class=&quot;math&quot;&gt;&lt;img style=&quot;vertical-align:middle&quot; src=&quot;http://latex.codecogs.com/png.latex?\inline J&quot; alt=&quot;J&quot; /&gt;&lt;/span&gt; and &lt;span class=&quot;math&quot;&gt;&lt;img style=&quot;vertical-align:middle&quot; src=&quot;http://latex.codecogs.com/png.latex?\inline A&quot; alt=&quot;A&quot; /&gt;&lt;/span&gt; with &lt;span class=&quot;math&quot;&gt;&lt;img style=&quot;vertical-align:middle&quot; src=&quot;http://latex.codecogs.com/png.latex?\inline K&quot; alt=&quot;K&quot; /&gt;&lt;/span&gt; in the third and fourth equations; there’s no reason the encounter rate should be tied to carrying capacity. Also, I’ve put stage-specific values for all the parameters (now including &lt;span class=&quot;math&quot;&gt;&lt;img style=&quot;vertical-align:middle&quot; src=&quot;http://latex.codecogs.com/png.latex?\inline \alpha&quot; alt=&quot;\alpha&quot; /&gt;&lt;/span&gt;, &lt;span class=&quot;math&quot;&gt;&lt;img style=&quot;vertical-align:middle&quot; src=&quot;http://latex.codecogs.com/png.latex?\inline \mu&quot; alt=&quot;\mu&quot; /&gt;&lt;/span&gt;, and &lt;span class=&quot;math&quot;&gt;&lt;img style=&quot;vertical-align:middle&quot; src=&quot;http://latex.codecogs.com/png.latex?\inline \lambda&quot; alt=&quot;\lambda&quot; /&gt;&lt;/span&gt;).&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math&quot;&gt;\[\begin{aligned}
  \frac{dJ}{dt}  &amp;amp;= A f_A \left(1 - \frac{J+A}{K} \right) + J  
                    \left(f_J \left(1 - \frac{J+A}{K} \right) - 
                          d_J - g\right) - \alpha_J P_J \\
  \frac{dA}{dt}  &amp;amp;= J g - A d_A - \alpha_A P_A \\
  \frac{dP_J}{dt}  &amp;amp;= \lambda_J J (P_J + P_A)  - 
                      P_J \left(d_J + \mu_J + g + \alpha_J 
                                \left(1 + \frac{P_J}{J} \right) \right) \\
  \frac{dP_A}{dt}  &amp;amp;= \lambda_A A (P_J + P_A)  + P_J  g - 
                      P_A \left(d_A + \mu_A + \alpha_A 
                                \left(1 + \frac{P_A}{A}  \right) \right)
\end{aligned}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;To examine whether the age structure matters, I try to collapse this down to a model of just one aggregated population. Let&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math&quot;&gt;\[\begin{aligned}
  N = J + A, &amp;amp;&amp;amp; P = P_J + P_A
\end{aligned}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;The parameters then become the population-weighted means of their components:&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math&quot;&gt;\[\begin{aligned}
   d = (J d_J + A d_A)/N, &amp;amp;&amp;amp; f = (J f_J + A d_A)/N \\
   \mu = (P_J \mu_J + P_A \mu_A)/P, &amp;amp;&amp;amp; \alpha = (P_J \alpha_J + P_A \alpha_A)/P
\end{aligned}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;The first two equations sum easily:&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math&quot;&gt;&lt;div style=&quot;text-align:center;&quot;&gt;&lt;img src=&quot;http://latex.codecogs.com/png.latex?\frac{dN}{dt} = Nf\left(1 - \frac{N}{K}\right) - dN - \alpha P&quot; alt=&quot;\frac{dN}{dt} = Nf\left(1 - \frac{N}{K}\right) - dN - \alpha P&quot; /&gt;&lt;/div&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;The second two equations don’t do quite the same thing:&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math&quot;&gt;\[\begin{aligned}
  \frac{dP}{dt} &amp;amp; = \lambda NP - \mu P - \left(d_J P_J + d_A P_A\right) - 
                     \alpha P - \left(\alpha_J \frac{P_J^2}{J} + 
                                       \alpha_A \frac{P_A^2}{A}\right) 
\end{aligned}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;To compare this equation to a model with no age structure, I define two terms, &lt;span class=&quot;math&quot;&gt;&lt;img style=&quot;vertical-align:middle&quot; src=&quot;http://latex.codecogs.com/png.latex?\inline \psi&quot; alt=&quot;\psi&quot; /&gt;&lt;/span&gt; and &lt;span class=&quot;math&quot;&gt;&lt;img style=&quot;vertical-align:middle&quot; src=&quot;http://latex.codecogs.com/png.latex?\inline \phi&quot; alt=&quot;\phi&quot; /&gt;&lt;/span&gt; which represent the differences between the terms in parentheses in the equation above and the equivalent term in a model without age structure. For ease of later calculations, I scale these by &lt;span class=&quot;math&quot;&gt;&lt;img style=&quot;vertical-align:middle&quot; src=&quot;http://latex.codecogs.com/png.latex?\inline P&quot; alt=&quot;P&quot; /&gt;&lt;/span&gt;:&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math&quot;&gt;\[\begin{aligned}
    \psi P &amp;amp;= (d_J P_J + d_A P_A) - dP \\
           &amp;amp;= (d_J P_J + d_A P_A) - \frac{d_J J + d_A A}{J + A} (P_J + P_A) \\
           &amp;amp;= \frac{(d_J - d_A)P_J A + (d_A - d_J)P_A J}{J+A} \\
           &amp;amp;= \frac{(d_J - d_A)(P_J A - P_A J)}{J+A} 
  \end{aligned}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math&quot;&gt;\[\begin{aligned}
    \phi P &amp;amp;= \left(\alpha_J \frac{P_J^2}{J} + \alpha_A \frac{P_A^2}{A}\right) - 
              \alpha \frac{P^2}{N}  \\
           &amp;amp;= \left(\alpha_J \frac{P_J^2}{J} + \alpha_A \frac{P_A^2}{A}\right) - 
              \frac{(\alpha_J P_J + \alpha_A P_A)(P_J + P_A)}{(J+A)} \\
           &amp;amp;=  \frac{(\alpha_J P_J A - \alpha_A P_A J)(P_J A - P_A J)}{JA(J+A)} 
  \end{aligned}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;I substitute these into &lt;span class=&quot;math&quot;&gt;&lt;img style=&quot;vertical-align:middle&quot; src=&quot;http://latex.codecogs.com/png.latex?\inline \frac{dP}{dt}&quot; alt=&quot;\frac{dP}{dt}&quot; /&gt;&lt;/span&gt; above to get&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math&quot;&gt;\[\frac{dP}{dt} = \lambda N P - (\mu + d) P - 
  \alpha P \left(1 + \frac{P}{N}\right) - (\psi + \phi)P\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;How to &lt;span class=&quot;math&quot;&gt;&lt;img style=&quot;vertical-align:middle&quot; src=&quot;http://latex.codecogs.com/png.latex?\inline \phi&quot; alt=&quot;\phi&quot; /&gt;&lt;/span&gt; and &lt;span class=&quot;math&quot;&gt;&lt;img style=&quot;vertical-align:middle&quot; src=&quot;http://latex.codecogs.com/png.latex?\inline \psi&quot; alt=&quot;\psi&quot; /&gt;&lt;/span&gt; modify the dynamics? &lt;span class=&quot;math&quot;&gt;&lt;img style=&quot;vertical-align:middle&quot; src=&quot;http://latex.codecogs.com/png.latex?\inline \psi&quot; alt=&quot;\psi&quot; /&gt;&lt;/span&gt; is zero at &lt;span class=&quot;math&quot;&gt;&lt;img style=&quot;vertical-align:middle&quot; src=&quot;http://latex.codecogs.com/png.latex?\inline d_A=d_J&quot; alt=&quot;d_A=d_J&quot; /&gt;&lt;/span&gt; or &lt;span class=&quot;math&quot;&gt;&lt;img style=&quot;vertical-align:middle&quot; src=&quot;http://latex.codecogs.com/png.latex?\inline \frac{P_J}{J} = \frac{P_A}{A}&quot; alt=&quot;\frac{P_J}{J} = \frac{P_A}{A}&quot; /&gt;&lt;/span&gt;. It will be positive if the class with higher infection rate also has a higher base mortality rate, and negative otherwise. A positive &lt;span class=&quot;math&quot;&gt;&lt;img style=&quot;vertical-align:middle&quot; src=&quot;http://latex.codecogs.com/png.latex?\inline \psi&quot; alt=&quot;\psi&quot; /&gt;&lt;/span&gt; value will decrease the growth of the parasite population, as more-infected individuals will die at a faster rate, removing more parasites from the population.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math&quot;&gt;&lt;img style=&quot;vertical-align:middle&quot; src=&quot;http://latex.codecogs.com/png.latex?\inline \phi&quot; alt=&quot;\phi&quot; /&gt;&lt;/span&gt; is zero at at &lt;span class=&quot;math&quot;&gt;&lt;img style=&quot;vertical-align:middle&quot; src=&quot;http://latex.codecogs.com/png.latex?\inline \frac{P_J}{J} = \frac{P_A}{A}&quot; alt=&quot;\frac{P_J}{J} = \frac{P_A}{A}&quot; /&gt;&lt;/span&gt;, but not at &lt;span class=&quot;math&quot;&gt;&lt;img style=&quot;vertical-align:middle&quot; src=&quot;http://latex.codecogs.com/png.latex?\inline \alpha_J = \alpha_A&quot; alt=&quot;\alpha_J = \alpha_A&quot; /&gt;&lt;/span&gt;, meaning that dynamics should deviate from an a model without age structure even if there is no difference in disease-driven mortality between age classes. For &lt;span class=&quot;math&quot;&gt;&lt;img style=&quot;vertical-align:middle&quot; src=&quot;http://latex.codecogs.com/png.latex?\inline \phi&quot; alt=&quot;\phi&quot; /&gt;&lt;/span&gt; to be positive either both or neither of the terms in parenthesis must be greater than zero, or&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math&quot;&gt;\[\left(\frac{P_J}{J} &amp;gt; \frac{P_A}{A}\right) \Leftrightarrow 
  \left(\alpha_J \frac{P_J}{J} &amp;gt; \alpha_A \frac{P_A}{A}\right)\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Note that if &lt;span class=&quot;math&quot;&gt;&lt;img style=&quot;vertical-align:middle&quot; src=&quot;http://latex.codecogs.com/png.latex?\inline \alpha_J = \alpha_A&quot; alt=&quot;\alpha_J = \alpha_A&quot; /&gt;&lt;/span&gt;, this is always true. So if the disease has an identical effect on both age classes, &lt;span class=&quot;math&quot;&gt;&lt;img style=&quot;vertical-align:middle&quot; src=&quot;http://latex.codecogs.com/png.latex?\inline \phi&quot; alt=&quot;\phi&quot; /&gt;&lt;/span&gt; will be positive. A positive value of &lt;span class=&quot;math&quot;&gt;&lt;img style=&quot;vertical-align:middle&quot; src=&quot;http://latex.codecogs.com/png.latex?\inline \phi&quot; alt=&quot;\phi&quot; /&gt;&lt;/span&gt; will slow growth of the parasite population by increasing the death rate of the more infected population, more rapidly removing parasites. The reverse will happen when &lt;span class=&quot;math&quot;&gt;&lt;img style=&quot;vertical-align:middle&quot; src=&quot;http://latex.codecogs.com/png.latex?\inline \phi&quot; alt=&quot;\phi&quot; /&gt;&lt;/span&gt; is negative. The more infected population will lose fewer individuals to disease because of a low relative &lt;span class=&quot;math&quot;&gt;&lt;img style=&quot;vertical-align:middle&quot; src=&quot;http://latex.codecogs.com/png.latex?\inline \alpha&quot; alt=&quot;\alpha&quot; /&gt;&lt;/span&gt; value, and the rate of parasite growth will increase because these individuals will remain to reproduce. Essentially, the value of &lt;span class=&quot;math&quot;&gt;&lt;img style=&quot;vertical-align:middle&quot; src=&quot;http://latex.codecogs.com/png.latex?\inline \phi&quot; alt=&quot;\phi&quot; /&gt;&lt;/span&gt; represents whether the ratio &lt;span class=&quot;math&quot;&gt;&lt;img style=&quot;vertical-align:middle&quot; src=&quot;http://latex.codecogs.com/png.latex?\inline \alpha_J/\alpha_A&quot; alt=&quot;\alpha_J/\alpha_A&quot; /&gt;&lt;/span&gt; enhances or offsets the non-linear relationship between parasite load and parasite loss caused by aggregation of parasites.&lt;/p&gt;
&lt;p&gt;Now the system of equations is:&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math&quot;&gt;\[
\begin{aligned}
  \frac{dN}{dt} &amp;amp;= Nf \left(1 - \frac{N}{K}\right) - dN - \alpha P \\
  \frac{dP}{dt} &amp;amp;= \lambda N P - (\mu + d) P - 
                   \alpha P \left(1 + \frac{P}{N}\right) - P(\psi + \phi) 
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Since all terms in &lt;span class=&quot;math&quot;&gt;&lt;img style=&quot;vertical-align:middle&quot; src=&quot;http://latex.codecogs.com/png.latex?\inline \psi&quot; alt=&quot;\psi&quot; /&gt;&lt;/span&gt; and &lt;span class=&quot;math&quot;&gt;&lt;img style=&quot;vertical-align:middle&quot; src=&quot;http://latex.codecogs.com/png.latex?\inline \phi&quot; alt=&quot;\phi&quot; /&gt;&lt;/span&gt; contain &lt;span class=&quot;math&quot;&gt;&lt;img style=&quot;vertical-align:middle&quot; src=&quot;http://latex.codecogs.com/png.latex?\inline P_X&quot; alt=&quot;P_X&quot; /&gt;&lt;/span&gt; values in the numerators but not denominators, as &lt;span class=&quot;math&quot;&gt;&lt;img style=&quot;vertical-align:middle&quot; src=&quot;http://latex.codecogs.com/png.latex?\inline P \rightarrow 0&quot; alt=&quot;P \rightarrow 0&quot; /&gt;&lt;/span&gt;, so do &lt;span class=&quot;math&quot;&gt;&lt;img style=&quot;vertical-align:middle&quot; src=&quot;http://latex.codecogs.com/png.latex?\inline \psi&quot; alt=&quot;\psi&quot; /&gt;&lt;/span&gt; and &lt;span class=&quot;math&quot;&gt;&lt;img style=&quot;vertical-align:middle&quot; src=&quot;http://latex.codecogs.com/png.latex?\inline \phi&quot; alt=&quot;\phi&quot; /&gt;&lt;/span&gt;. This means that the growth rate of the parasites is unaffected by the population structure when numbers are small. We can calculate this rate, which is the same as it would be with no population structure:&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math&quot;&gt;&lt;div style=&quot;text-align:center;&quot;&gt;&lt;img src=&quot;http://latex.codecogs.com/png.latex?\frac{dP/dt}{P}\bigg|_{P\rightarrow 0} = \lambda N - \mu - d - \alpha&quot; alt=&quot;\frac{dP/dt}{P}\bigg|_{P\rightarrow 0} = \lambda N - \mu - d - \alpha&quot; /&gt;&lt;/div&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math&quot;&gt;&lt;div style=&quot;text-align:center;&quot;&gt;&lt;img src=&quot;http://latex.codecogs.com/png.latex?N_{\text{threshold}} = \frac{\mu + d + \alpha}{\lambda}&quot; alt=&quot;N_{\text{threshold}} = \frac{\mu + d + \alpha}{\lambda}&quot; /&gt;&lt;/div&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;(A reminder here that reducing &lt;span class=&quot;math&quot;&gt;&lt;img style=&quot;vertical-align:middle&quot; src=&quot;http://latex.codecogs.com/png.latex?\inline \alpha&quot; alt=&quot;\alpha&quot; /&gt;&lt;/span&gt; but not &lt;span class=&quot;math&quot;&gt;&lt;img style=&quot;vertical-align:middle&quot; src=&quot;http://latex.codecogs.com/png.latex?\inline \lambda&quot; alt=&quot;\lambda&quot; /&gt;&lt;/span&gt; in the tanoak population is a losing strategy)&lt;/p&gt;
&lt;p&gt;Setting &lt;span class=&quot;math&quot;&gt;&lt;img style=&quot;vertical-align:middle&quot; src=&quot;http://latex.codecogs.com/png.latex?\inline dN/dt = 0&quot; alt=&quot;dN/dt = 0&quot; /&gt;&lt;/span&gt;, we can solve for &lt;span class=&quot;math&quot;&gt;&lt;img style=&quot;vertical-align:middle&quot; src=&quot;http://latex.codecogs.com/png.latex?\inline \frac{P}{N}&quot; alt=&quot;\frac{P}{N}&quot; /&gt;&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math&quot;&gt;\[
  \frac{P}{N} = \frac{f\left(1-\frac{N}{K}\right) -d }{\alpha}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Under disease-free conditions, this is easily solved for &lt;span class=&quot;math&quot;&gt;&lt;img style=&quot;vertical-align:middle&quot; src=&quot;http://latex.codecogs.com/png.latex?\inline N&quot; alt=&quot;N&quot; /&gt;&lt;/span&gt;:&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math&quot;&gt;&lt;div style=&quot;text-align:center;&quot;&gt;&lt;img src=&quot;http://latex.codecogs.com/png.latex?N_{eq}\big|_{P=0} = {K\left(1-\frac{d}{f}\right)}&quot; alt=&quot;N_{eq}\big|_{P=0} = {K\left(1-\frac{d}{f}\right)}&quot; /&gt;&lt;/div&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;If the population was unstructured, we would get:&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math&quot;&gt;&lt;div style=&quot;text-align:center;&quot;&gt;&lt;img src=&quot;http://latex.codecogs.com/png.latex?N_{eq}\big|_{P_{eq} &amp;gt; 0} = \frac{\mu + \alpha + f}{\lambda + \frac{f}{K} } &quot; alt=&quot;N_{eq}\big|_{P_{eq} &amp;gt; 0} = \frac{\mu + \alpha + f}{\lambda + \frac{f}{K} } &quot; /&gt;&lt;/div&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;With the age structure, &lt;span class=&quot;math&quot;&gt;\[
\begin{aligned}
  \frac{dP}{dt} &amp;amp;= 0 = P\left(\lambda N - \mu - d - \alpha - 
                              \alpha \frac{P}{N}\right) -  P(\psi + \phi)\\
  N &amp;amp;= \frac{\mu + \alpha + f + \psi + \phi}{\lambda + \frac{f}{K}} 
\end{aligned} 
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Positive values of &lt;span class=&quot;math&quot;&gt;&lt;img style=&quot;vertical-align:middle&quot; src=&quot;http://latex.codecogs.com/png.latex?\inline \psi&quot; alt=&quot;\psi&quot; /&gt;&lt;/span&gt; and &lt;span class=&quot;math&quot;&gt;&lt;img style=&quot;vertical-align:middle&quot; src=&quot;http://latex.codecogs.com/png.latex?\inline \phi&quot; alt=&quot;\phi&quot; /&gt;&lt;/span&gt; increase the overall host population, and following the expression for &lt;span class=&quot;math&quot;&gt;&lt;img style=&quot;vertical-align:middle&quot; src=&quot;http://latex.codecogs.com/png.latex?\inline P/N&quot; alt=&quot;P/N&quot; /&gt;&lt;/span&gt; above, reduce the mean infection level.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Printing R help files in the console or in knitr documents</title>
   <link href="http://www.noamross.net/blog/2013/6/18/helpconsoleexample.html"/>
   <updated>2013-06-18T10:57:22-07:00</updated>
   <id>hhttp://www.noamross.net/blog/2013/6/18/helpconsoleexample</id>
   <content type="html">&lt;head&gt;
  &lt;style type=&quot;text/css&quot;  media=&quot;all&quot;&gt;
    table tbody {border-top:2px; border-bottom:2px;}
    table thead {border-bottom:1px;}
  &lt;/style&gt;
&lt;/head&gt; &lt;p&gt;Yesterday, I was creating a &lt;code&gt;knitr&lt;/code&gt; document based on a script, and was looking for a way to include content from an R help file. The script, which was a teaching document, had a &lt;code&gt;help()&lt;/code&gt; command for when the author wanted to refer readers to R documentation. I wanted that text in my final document, though.&lt;/p&gt;
&lt;p&gt;There’s no standard way to do this in R, but with some help from &lt;a href=&quot;http://stackoverflow.com/questions/7493843/how-to-write-contents-of-help-to-a-file-from-within-r&quot;&gt;Stack Overflow&lt;/a&gt; and &lt;a href=&quot;https://gist.github.com/SChamberlain/5801605&quot;&gt;Scott Chamberlain&lt;/a&gt;, I figured out I needed some functions hidden in the depths of the &lt;code&gt;tools&lt;/code&gt; package. So I wrote this function:&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;help_console &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;function(topic, &lt;span class=&quot;dt&quot;&gt;format=&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;c&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;text&amp;quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;quot;html&amp;quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;quot;latex&amp;quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;quot;Rd&amp;quot;&lt;/span&gt;),
                         &lt;span class=&quot;dt&quot;&gt;lines=&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;NULL&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;before=&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;NULL&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;after=&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;NULL&lt;/span&gt;) {  
  format=&lt;span class=&quot;kw&quot;&gt;match.arg&lt;/span&gt;(format)
  if (!&lt;span class=&quot;kw&quot;&gt;is.character&lt;/span&gt;(topic)) topic &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;deparse&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;substitute&lt;/span&gt;(topic))
  helpfile =&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;utils:::&lt;span class=&quot;kw&quot;&gt;.getHelpFile&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;help&lt;/span&gt;(topic))

  hs &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;capture.output&lt;/span&gt;(switch(format, 
                              &lt;span class=&quot;dt&quot;&gt;text=&lt;/span&gt;tools:::&lt;span class=&quot;kw&quot;&gt;Rd2txt&lt;/span&gt;(helpfile),
                              &lt;span class=&quot;dt&quot;&gt;html=&lt;/span&gt;tools:::&lt;span class=&quot;kw&quot;&gt;Rd2HTML&lt;/span&gt;(helpfile),
                              &lt;span class=&quot;dt&quot;&gt;latex=&lt;/span&gt;tools:::&lt;span class=&quot;kw&quot;&gt;Rd2latex&lt;/span&gt;(helpfile),
                              &lt;span class=&quot;dt&quot;&gt;Rd=&lt;/span&gt;tools:::&lt;span class=&quot;kw&quot;&gt;prepare_Rd&lt;/span&gt;(helpfile)
                              )
                      )
  if(!&lt;span class=&quot;kw&quot;&gt;is.null&lt;/span&gt;(lines)) hs &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;hs[lines]
  hs &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;c&lt;/span&gt;(before, hs, after)
  &lt;span class=&quot;kw&quot;&gt;cat&lt;/span&gt;(hs, &lt;span class=&quot;dt&quot;&gt;sep=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;&lt;/span&gt;)
  &lt;span class=&quot;kw&quot;&gt;invisible&lt;/span&gt;(hs)
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;help_console&lt;/code&gt; prints the help file to the console or lets you assign the help file text to a character. Below, I use it to dynamically print the start of the help file for the &lt;code&gt;optim()&lt;/code&gt; function as quoted HTML (note that the &lt;code&gt;knitr&lt;/code&gt; chunk has the option &lt;code&gt;results='asis')&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;help_console&lt;/span&gt;(optim, &lt;span class=&quot;st&quot;&gt;&amp;quot;html&amp;quot;&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;lines =&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;:&lt;span class=&quot;dv&quot;&gt;25&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;before =&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;&amp;lt;blockquote&amp;gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;after =&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;&amp;lt;/blockquote&amp;gt;&amp;quot;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;&gt;
&lt;html&gt;&lt;head&gt;&lt;title&gt;
R: General-purpose Optimization
&lt;/title&gt;
&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt; &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;R.css&quot;&gt;
&lt;/head&gt;&lt;body&gt;

&lt;table width=&quot;100%&quot; summary=&quot;page for optim&quot;&gt;&lt;tr&gt;&lt;td&gt;
optim
&lt;/td&gt;&lt;td align=&quot;right&quot;&gt;
R Documentation
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h2&gt;
General-purpose Optimization
&lt;/h2&gt;

&lt;h3&gt;
Description
&lt;/h3&gt;

&lt;p&gt;
General-purpose optimization based on Nelder–Mead, quasi-Newton and conjugate-gradient algorithms. It includes an option for box-constrained optimization and simulated annealing.
&lt;/p&gt;


&lt;h3&gt;
Usage
&lt;/h3&gt;

&lt;pre&gt;
optim(par, fn, gr = NULL, …, method = c(“Nelder-Mead”, “BFGS”, “CG”, “L-BFGS-B”, “SANN”, “Brent”), lower = -Inf, upper = Inf, control = list(), hessian = FALSE)
&lt;/blockquote&gt;


&lt;p&gt;The function is part of my &lt;a href=&quot;https://github.com/noamross/noamtools/blob/master/R/help_console.R&quot;&gt;&lt;code&gt;noamtools&lt;/code&gt; package on GitHub&lt;/a&gt;, where I keep various convenience functions. Enjoy, and fork if you have improvements!&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Dave Harris on Maximum Likelihood Estimation</title>
   <link href="http://www.noamross.net/blog/2013/6/17/harrisbbmle.html"/>
   <updated>2013-06-17T15:11:17-07:00</updated>
   <id>hhttp://www.noamross.net/blog/2013/6/17/harrisbbmle</id>
   <content type="html">&lt;head&gt;
  &lt;style type=&quot;text/css&quot;  media=&quot;all&quot;&gt;
    table tbody {border-top:2px; border-bottom:2px;}
    table thead {border-bottom:1px;}
  &lt;/style&gt;
&lt;/head&gt; &lt;p&gt;&lt;em&gt;At our last &lt;a href=&quot;http://www.noamross.net/davis-r-users-group.html&quot;&gt;Davis R Users’ Group&lt;/a&gt; meeting of the quarter, &lt;a href=&quot;https://sihlab.wordpress.com/david-j-harris/&quot;&gt;Dave Harris&lt;/a&gt; gave a talk on how to use the &lt;code&gt;bbmle&lt;/code&gt; package to fit mechanistic models to ecological data. Here’s his script, which I ran throgh the &lt;code&gt;spin&lt;/code&gt; function in &lt;code&gt;knitr&lt;/code&gt;:&lt;/em&gt;&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;co&quot;&gt;# Load data&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;library&lt;/span&gt;(emdbook)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;## Loading required package: MASS Loading required package: lattice&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;library&lt;/span&gt;(bbmle)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;## Loading required package: stats4&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;data&lt;/span&gt;(ReedfrogFuncresp)
&lt;span class=&quot;kw&quot;&gt;plot&lt;/span&gt;(ReedfrogFuncresp, &lt;span class=&quot;dt&quot;&gt;xlim =&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;c&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;100&lt;/span&gt;), &lt;span class=&quot;dt&quot;&gt;xaxs =&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;i&amp;quot;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&quot;figure&quot;&gt;
&lt;img src=&quot;http://dl.dropbox.com/u/3356641/blogstuff/h1.png&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;Statistical models are stories about how the data came to be. The deterministic part of the story is a (slightly mangled) version of what you’d expect if the predators followed a Type II functional response:&lt;/p&gt;
&lt;p&gt;Holling’s Disk equation for Type II Functional Response&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;a&lt;/code&gt; is attack rate&lt;/li&gt;
&lt;li&gt;&lt;code&gt;h&lt;/code&gt; is handling time&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;disk =&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;function(N, a, h) {
    N *&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;a/(&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; +&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;N *&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;a *&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;h)
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can plot different values of &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;h&lt;/code&gt; to see what kinds of data this model would generate &lt;em&gt;on average:&lt;/em&gt;&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;plot&lt;/span&gt;(ReedfrogFuncresp, &lt;span class=&quot;dt&quot;&gt;xlim =&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;c&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;100&lt;/span&gt;), &lt;span class=&quot;dt&quot;&gt;xaxs =&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;i&amp;quot;&lt;/span&gt;)
&lt;span class=&quot;co&quot;&gt;# a = 3, h = 0.05 (black) rises too quickly, saturates too quickly&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;curve&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;disk&lt;/span&gt;(x, &lt;span class=&quot;dt&quot;&gt;a =&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;h =&lt;/span&gt; &lt;span class=&quot;fl&quot;&gt;0.05&lt;/span&gt;), &lt;span class=&quot;dt&quot;&gt;add =&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;TRUE&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;from =&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;to =&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;100&lt;/span&gt;)
&lt;span class=&quot;co&quot;&gt;# a = 2, h = 0.02 (red) still rises too quickly&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;curve&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;disk&lt;/span&gt;(x, &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;fl&quot;&gt;0.02&lt;/span&gt;), &lt;span class=&quot;dt&quot;&gt;add =&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;TRUE&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;from =&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;to =&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;100&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;col =&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;)
&lt;span class=&quot;co&quot;&gt;# a = 0.5, h = 0.02 (blue) looks like a plausible data-generating process&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;curve&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;disk&lt;/span&gt;(x, &lt;span class=&quot;fl&quot;&gt;0.5&lt;/span&gt;, &lt;span class=&quot;fl&quot;&gt;0.02&lt;/span&gt;), &lt;span class=&quot;dt&quot;&gt;add =&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;TRUE&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;from =&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;to =&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;100&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;col =&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&quot;figure&quot;&gt;
&lt;img src=&quot;http://dl.dropbox.com/u/3356641/blogstuff/h3.png&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;The blue curve looks plausible, but is it optimal? Does it tell the best possible story about how the data could have been generated?&lt;/p&gt;
&lt;p&gt;In order to tell if it’s optimal, we need to pick something to optimize. Usually, that will be the log-likelihood–i.e. the log-probability that the data would have come out this way if the model were true. Models with higher probabilities of generating the data we observed therefore have higher likelihoods. For various arbitrary reasons, it’s common to minimize the negative log-likelihood rather than maximizing the positive log-likelihood. So let’s write a function that says what the log-likelihood is for a given pair of &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;h&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The log-likelihood is the sum of log-probabilities from each data point. The log-probability for a data point is (in this contrived example) drawn from a binomial (“coin flip”) distribution, whose mean is determined by the disk equation.&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;NLL =&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;function(a, h) {
    -&lt;span class=&quot;kw&quot;&gt;sum&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;dbinom&lt;/span&gt;(ReedfrogFuncresp$Killed, &lt;span class=&quot;dt&quot;&gt;size =&lt;/span&gt; ReedfrogFuncresp$Initial, &lt;span class=&quot;dt&quot;&gt;prob =&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;disk&lt;/span&gt;(ReedfrogFuncresp$Initial, 
        a, h)/ReedfrogFuncresp$Initial, &lt;span class=&quot;dt&quot;&gt;log =&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;TRUE&lt;/span&gt;))
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can optimize the model with the mle2 function. It finds the lowest value for the negative log-likelihood (i.e. the combination of parameters with the highest positive likelihood, or the maximum likelihood estimate).&lt;/p&gt;
&lt;p&gt;The NLL function we defined above requires starting values for &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;h&lt;/code&gt;. Let’s naively start them at 1, 1&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;fit =&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;mle2&lt;/span&gt;(NLL, &lt;span class=&quot;dt&quot;&gt;start =&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;list&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;a =&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;h =&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;))&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;## Warning: NaNs produced Warning: NaNs produced Warning: NaNs produced
## Warning: NaNs produced Warning: NaNs produced Warning: NaNs produced
## Warning: NaNs produced Warning: NaNs produced Warning: NaNs produced
## Warning: NaNs produced Warning: NaNs produced Warning: NaNs produced
## Warning: NaNs produced Warning: NaNs produced Warning: NaNs produced
## Warning: NaNs produced Warning: NaNs produced Warning: NaNs produced&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You’ll probably get lots of warnings about NaNs. That’s just the optimization procedure complaining because it occasionally tries something impossible (such as a set of parameters that would generate a negative probability of being eaten). In general, these warnings are nothing to worry about, since the optimization procedure will just try better values. But it’s worth checking to make sure that there are no other warnings or problems by calling &lt;code&gt;warnings()&lt;/code&gt; after you fit the model.&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;co&quot;&gt;# print out the results&lt;/span&gt;
fit&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;## 
## Call:
## mle2(minuslogl = NLL, start = list(a = 1, h = 1))
## 
## Coefficients:
##       a       h 
## 0.52652 0.01666 
## 
## Log-likelihood: -46.72&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;
&lt;span class=&quot;co&quot;&gt;# a bit more information:&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;summary&lt;/span&gt;(fit)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;## Maximum likelihood estimation
## 
## Call:
## mle2(minuslogl = NLL, start = list(a = 1, h = 1))
## 
## Coefficients:
##   Estimate Std. Error z value   Pr(z)    
## a  0.52652    0.07112    7.40 1.3e-13 ***
## h  0.01666    0.00488    3.41 0.00065 ***
## ---
## Signif. codes:  0 &amp;#39;***&amp;#39; 0.001 &amp;#39;**&amp;#39; 0.01 &amp;#39;*&amp;#39; 0.05 &amp;#39;.&amp;#39; 0.1 &amp;#39; &amp;#39; 1
## 
## -2 log L: 93.44&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;coef&lt;/span&gt;(fit)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;##       a       h 
## 0.52652 0.01666&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here’s the curve associated with the most likely combination of a and &lt;code&gt;h&lt;/code&gt; (thick black line).&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;plot&lt;/span&gt;(ReedfrogFuncresp, &lt;span class=&quot;dt&quot;&gt;xlim =&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;c&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;100&lt;/span&gt;), &lt;span class=&quot;dt&quot;&gt;xaxs =&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;i&amp;quot;&lt;/span&gt;)
&lt;span class=&quot;kw&quot;&gt;curve&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;disk&lt;/span&gt;(x, &lt;span class=&quot;dt&quot;&gt;a =&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;coef&lt;/span&gt;(fit)[&lt;span class=&quot;st&quot;&gt;&amp;quot;a&amp;quot;&lt;/span&gt;], &lt;span class=&quot;dt&quot;&gt;h =&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;coef&lt;/span&gt;(fit)[&lt;span class=&quot;st&quot;&gt;&amp;quot;h&amp;quot;&lt;/span&gt;]), &lt;span class=&quot;dt&quot;&gt;add =&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;TRUE&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;lwd =&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;, 
    &lt;span class=&quot;dt&quot;&gt;from =&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;to =&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;100&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&quot;figure&quot;&gt;
&lt;img src=&quot;http://dl.dropbox.com/u/3356641/blogstuff/h7.png&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;The rethinking package has a few convenient functions for summarizing and visualizing the output of an mle2 object. It’s not on CRAN, but you can get it from the author’s website or &lt;a href=&quot;https://github.com/rmcelreath/rethinking&quot;&gt;from github.&lt;/a&gt;&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;library&lt;/span&gt;(rethinking)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;## Attaching package: &amp;#39;rethinking&amp;#39;
## 
## The following object is masked _by_ &amp;#39;.GlobalEnv&amp;#39;:
## 
## x&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;precis&lt;/span&gt;(fit)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;##   Estimate S.E. 2.5% 97.5%
## a     0.53 0.07 0.39  0.67
## h     0.02 0.00 0.01  0.03&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can also visualize a distribution of estimates that are reasonably consistent with the observed data using the sample.naive.posterior function:&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;plot&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;sample.naive.posterior&lt;/span&gt;(fit), &lt;span class=&quot;dt&quot;&gt;pch =&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;.&amp;quot;&lt;/span&gt;)

&lt;span class=&quot;co&quot;&gt;# Add a red dot for the maximum likelihood estimate:&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;points&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;as.data.frame&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;as.list&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;coef&lt;/span&gt;(fit))), &lt;span class=&quot;dt&quot;&gt;col =&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;pch =&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;20&lt;/span&gt;)

&lt;span class=&quot;co&quot;&gt;# Add a blue dot for our earlier guess:&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;points&lt;/span&gt;(&lt;span class=&quot;fl&quot;&gt;0.5&lt;/span&gt;, &lt;span class=&quot;fl&quot;&gt;0.02&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;col =&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;pch =&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;20&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&quot;figure&quot;&gt;
&lt;img src=&quot;http://dl.dropbox.com/u/3356641/blogstuff/h9.png&quot; /&gt;
&lt;/div&gt;
&lt;hr /&gt;
&lt;h3 id=&quot;a-big-digression-about-confidence-intervals&quot;&gt;A Big digression about confidence intervals&lt;/h3&gt;
&lt;p&gt;Our earlier guess falls inside the cloud of points, so even though it’s not as good as the red point, it’s still plausibly consistent with the data.&lt;/p&gt;
&lt;p&gt;Note that the ranges of plausible estimates for the two coefficients are correlated: This makes sense if you think about it: if the attack rate is high, then there needs to be a large handling time between attacks or else too many frogs would get eaten.&lt;/p&gt;
&lt;p&gt;Where did this distribution of points come from? &lt;code&gt;mle2&lt;/code&gt; objects, like many models in R, have a variance/covariance matrix that can be extracted with the vcov() function.&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;vcov&lt;/span&gt;(fit)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;##           a         h
## a 0.0050584 2.859e-04
## h 0.0002859 2.384e-05&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The variance terms (along the diagonal) describe mle2’s uncertainty about the values. The covariance terms (other entries in the matrix) describe how uncertainty in one coefficient relates to uncertainty in the other coefficient.&lt;/p&gt;
&lt;p&gt;This graph gives an example:&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;curve&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;dnorm&lt;/span&gt;(x, &lt;span class=&quot;dt&quot;&gt;sd =&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;/&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;), &lt;span class=&quot;dt&quot;&gt;from =&lt;/span&gt; -&lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;to =&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;ylab =&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;likelihood&amp;quot;&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;xlab =&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;estimate&amp;quot;&lt;/span&gt;)
&lt;span class=&quot;kw&quot;&gt;curve&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;dnorm&lt;/span&gt;(x, &lt;span class=&quot;dt&quot;&gt;sd =&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;), &lt;span class=&quot;dt&quot;&gt;add =&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;TRUE&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;col =&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&quot;figure&quot;&gt;
&lt;img src=&quot;http://dl.dropbox.com/u/3356641/blogstuff/h11.png&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;The black curve shows a model with low variance for its estimate. This means that the likelihood would fall off quickly if we tried a bad estimate, and we can be reasonably sure that the data was generated by a value in a fairly narrow range. The model associated with the red curve is much less certain: the parameter could be very different from the optimal value and the likelihood wouldn’t drop much.&lt;/p&gt;
&lt;p&gt;Here’s another way to visualize the decline in likelihood as you move away from the best estimate:&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;plot&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;profile&lt;/span&gt;(fit))&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&quot;figure&quot;&gt;
&lt;img src=&quot;http://dl.dropbox.com/u/3356641/blogstuff/h12.png&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;Keep in mind that all of this is based on a Gaussian approximation. It works well when you have lots of data and you aren’t estimating something near a boundary. Since &lt;code&gt;h&lt;/code&gt; is near its minimum value (at zero), there’s some risk that the confidence intervals are inaccurate. Markov chain Monte Carlo can provide more accurate estimates, but it’s also slower to run.&lt;/p&gt;
&lt;h4 id=&quot;a-somewhat-related-digression&quot;&gt;A somewhat-related digression:&lt;/h4&gt;
&lt;p&gt;Where does the vcov matrix come from? From a matrix called the Hessian. It describes the curvature of the likelihood surface, i.e. how quickly the log-likelihood falls off as you move away from the optimum.&lt;/p&gt;
&lt;p&gt;Sometimes the Hessian is hard to estimate and causes problems, so we can run the model without it:&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;fit.without.hessian =&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;mle2&lt;/span&gt;(NLL, &lt;span class=&quot;dt&quot;&gt;start =&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;list&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;a =&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;h =&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;), &lt;span class=&quot;dt&quot;&gt;skip.hessian =&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;TRUE&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;## Warning: NaNs produced Warning: NaNs produced Warning: NaNs produced
## Warning: NaNs produced Warning: NaNs produced Warning: NaNs produced
## Warning: NaNs produced Warning: NaNs produced Warning: NaNs produced
## Warning: NaNs produced Warning: NaNs produced Warning: NaNs produced
## Warning: NaNs produced Warning: NaNs produced Warning: NaNs produced
## Warning: NaNs produced Warning: NaNs produced Warning: NaNs produced&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When there’s no Hessian, there aren’t any confidence intervals, though.&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;precis&lt;/span&gt;(fit.without.hessian)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;##   Estimate S.E. 2.5% 97.5%
## a     0.53   NA   NA    NA
## h     0.02   NA   NA    NA&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(End digression)&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id=&quot;more-about-mle2&quot;&gt;More about &lt;code&gt;mle2&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Under the hood, &lt;code&gt;mle2&lt;/code&gt; uses a function called optim:&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;st&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;`&lt;/span&gt;(optim)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It’s worth noting that most of the optimization methods used in optim (and therefore in &lt;code&gt;mle2&lt;/code&gt;) only do a local optimization. So if your likelihood surface has multiple peaks, you may not find the right one.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;mle2&lt;/code&gt; also has a convenient formula inferface that can eliminate the need to write a whole likelihood function from scratch. Let’s take a look with some data found in ?mle2&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;x =&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;:&lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;
y =&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;c&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;26&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;17&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;13&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;12&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;20&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;9&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;8&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;8&lt;/span&gt;)
d =&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;data.frame&lt;/span&gt;(x, y)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here, we’re fitting a Poisson model that depends on an intercept term plus a linear term. The &lt;code&gt;exp()&lt;/code&gt; is mainly there to make sure that the value of lambda doesn’t go negative, which isn’t allowed (it would imply a negative number of occurrences for our outcome of interest).&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;fit0 =&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;mle2&lt;/span&gt;(y ~&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;dpois&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;lambda =&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;exp&lt;/span&gt;(intercept +&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;slope *&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;x)), &lt;span class=&quot;dt&quot;&gt;start =&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;list&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;intercept =&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;mean&lt;/span&gt;(y), 
    &lt;span class=&quot;dt&quot;&gt;slope =&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;), &lt;span class=&quot;dt&quot;&gt;data =&lt;/span&gt; d)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that mle2 finds its values for x and y from the &lt;code&gt;data&lt;/code&gt; term and that we’re giving it starting values for the slope and intercept. In general, it’s useful to start the intercept at the mean value of y and the slope terms at 0, but it often won’t matter much.&lt;/p&gt;
&lt;h3 id=&quot;prior-information&quot;&gt;Prior information&lt;/h3&gt;
&lt;p&gt;Recall that our estimates of a and &lt;code&gt;h&lt;/code&gt; are positively correlated: the data could be consistent with either a high attack rate and a high handling time OR with a low attack rate and a low handling time.&lt;/p&gt;
&lt;p&gt;Suppose we have prior information about tadpole/dragonfly biology that suggests that these parameters should be on the low end. We can encode this prior information as a prior distribution on the parameters. Then mle2 won’t climb the likelihood surface. It will climb the surface of the Bayesian posterior (or if you’re frequentist, it will do a penalized or constrained optimization of the likelihood).&lt;/p&gt;
&lt;p&gt;Here’s a negative log posterior that tries to keep the values of &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;h&lt;/code&gt; small while still being consistent with the data:&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;negative.log.posterior =&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;function(a, h) {
    &lt;span class=&quot;kw&quot;&gt;NLL&lt;/span&gt;(a, h) -&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;dexp&lt;/span&gt;(a, &lt;span class=&quot;dt&quot;&gt;rate =&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;log =&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;TRUE&lt;/span&gt;) -&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;dexp&lt;/span&gt;(h, &lt;span class=&quot;dt&quot;&gt;rate =&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;log =&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;TRUE&lt;/span&gt;)
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We optimize it exactly as before&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;fit2 =&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;mle2&lt;/span&gt;(negative.log.posterior, &lt;span class=&quot;dt&quot;&gt;start =&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;list&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;a =&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;h =&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;))&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;## Warning: NaNs produced Warning: NaNs produced Warning: NaNs produced
## Warning: NaNs produced Warning: NaNs produced Warning: NaNs produced
## Warning: NaNs produced Warning: NaNs produced Warning: NaNs produced
## Warning: NaNs produced Warning: NaNs produced Warning: NaNs produced
## Warning: NaNs produced Warning: NaNs produced Warning: NaNs produced
## Warning: NaNs produced Warning: NaNs produced Warning: NaNs produced
## Warning: NaNs produced Warning: NaNs produced Warning: NaNs produced
## Warning: NaNs produced Warning: NaNs produced Warning: NaNs produced
## Warning: NaNs produced Warning: NaNs produced Warning: NaNs produced
## Warning: NaNs produced Warning: NaNs produced Warning: NaNs produced
## Warning: NaNs produced&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Sure enough, the coefficients are a bit smaller&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;coef&lt;/span&gt;(fit)  &lt;span class=&quot;co&quot;&gt;# MLE&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;##       a       h 
## 0.52652 0.01666&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;coef&lt;/span&gt;(fit2)  &lt;span class=&quot;co&quot;&gt;# MAP estimate&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;##       a       h 
## 0.47931 0.01375&lt;/code&gt;&lt;/pre&gt;</content>
 </entry>
 
 
</feed>